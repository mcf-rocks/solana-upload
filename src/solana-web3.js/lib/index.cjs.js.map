{"version":3,"file":"index.cjs.js","sources":["../src/util/to-buffer.js","../src/publickey.js","../src/account.js","../src/timing.js","../src/layout.js","../src/util/shortvec-encoding.js","../src/message.js","../src/transaction.js","../src/sysvar.js","../src/fee-calculator.js","../src/nonce-account.js","../src/util/sleep.js","../src/connection.js","../src/util/send-and-confirm-transaction.js","../src/instruction.js","../src/system-program.js","../src/loader.js","../src/bpf-loader.js","../src/stake-program.js","../src/validator-info.js","../src/vote-account.js","../src/util/send-and-confirm-raw-transaction.js","../src/util/cluster.js","../src/index.js"],"sourcesContent":["// @flow\n\nexport const toBuffer = (arr: Buffer | Uint8Array | Array<number>): Buffer => {\n  if (arr instanceof Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return Buffer.from(arr);\n  }\n};\n","// @flow\n\nimport BN from 'bn.js';\nimport bs58 from 'bs58';\nimport nacl from 'tweetnacl';\nimport {sha256} from 'crypto-hash';\n\n//$FlowFixMe\nlet naclLowLevel = nacl.lowlevel;\n\ntype PublicKeyNonce = [PublicKey, number]; // This type exists to workaround an esdoc parse error\n\n/**\n * A public key\n */\nexport class PublicKey {\n  _bn: BN;\n\n  /**\n   * Create a new PublicKey object\n   */\n  constructor(value: number | string | Buffer | Uint8Array | Array<number>) {\n    if (typeof value === 'string') {\n      // assume base 58 encoding by default\n      const decoded = bs58.decode(value);\n      if (decoded.length != 32) {\n        throw new Error(`Invalid public key input`);\n      }\n      this._bn = new BN(decoded);\n    } else {\n      this._bn = new BN(value);\n    }\n\n    if (this._bn.byteLength() > 32) {\n      throw new Error(`Invalid public key input`);\n    }\n  }\n\n  /**\n   * Checks if two publicKeys are equal\n   */\n  equals(publicKey: PublicKey): boolean {\n    return this._bn.eq(publicKey._bn);\n  }\n\n  /**\n   * Return the base-58 representation of the public key\n   */\n  toBase58(): string {\n    return bs58.encode(this.toBuffer());\n  }\n\n  /**\n   * Return the Buffer representation of the public key\n   */\n  toBuffer(): Buffer {\n    const b = this._bn.toArrayLike(Buffer);\n    if (b.length === 32) {\n      return b;\n    }\n\n    const zeroPad = Buffer.alloc(32);\n    b.copy(zeroPad, 32 - b.length);\n    return zeroPad;\n  }\n\n  /**\n   * Returns a string representation of the public key\n   */\n  toString(): string {\n    return this.toBase58();\n  }\n\n  /**\n   * Derive a public key from another key, a seed, and a program ID.\n   */\n  static async createWithSeed(\n    fromPublicKey: PublicKey,\n    seed: string,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    const buffer = Buffer.concat([\n      fromPublicKey.toBuffer(),\n      Buffer.from(seed),\n      programId.toBuffer(),\n    ]);\n    const hash = await sha256(new Uint8Array(buffer));\n    return new PublicKey(Buffer.from(hash, 'hex'));\n  }\n\n  /**\n   * Derive a program address from seeds and a program ID.\n   */\n  static async createProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKey> {\n    let buffer = Buffer.alloc(0);\n    seeds.forEach(function (seed) {\n      buffer = Buffer.concat([buffer, Buffer.from(seed)]);\n    });\n    buffer = Buffer.concat([\n      buffer,\n      programId.toBuffer(),\n      Buffer.from('ProgramDerivedAddress'),\n    ]);\n    let hash = await sha256(new Uint8Array(buffer));\n    let publicKeyBytes = new BN(hash, 16).toArray();\n    if (is_on_curve(publicKeyBytes)) {\n      throw new Error(`Invalid seeds, address must fall off the curve`);\n    }\n    return new PublicKey(publicKeyBytes);\n  }\n\n  /**\n   * Find a valid program address\n   *\n   * Valid program addresses must fall off the ed25519 curve.  This function\n   * iterates a nonce until it finds one that when combined with the seeds\n   * results in a valid program address.\n   */\n  static async findProgramAddress(\n    seeds: Array<Buffer | Uint8Array>,\n    programId: PublicKey,\n  ): Promise<PublicKeyNonce> {\n    let nonce = 255;\n    let address;\n    while (nonce != 0) {\n      try {\n        const seedsWithNonce = seeds.concat(Buffer.from([nonce]));\n        address = await this.createProgramAddress(seedsWithNonce, programId);\n      } catch (err) {\n        nonce--;\n        continue;\n      }\n      return [address, nonce];\n    }\n    throw new Error(`Unable to find a viable program address nonce`);\n  }\n}\n\n// Check that a pubkey is on the curve.\n// This function and its dependents were sourced from:\n// https://github.com/dchest/tweetnacl-js/blob/f1ec050ceae0861f34280e62498b1d3ed9c350c6/nacl.js#L792\nfunction is_on_curve(p) {\n  var r = [\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n    naclLowLevel.gf(),\n  ];\n\n  var t = naclLowLevel.gf(),\n    chk = naclLowLevel.gf(),\n    num = naclLowLevel.gf(),\n    den = naclLowLevel.gf(),\n    den2 = naclLowLevel.gf(),\n    den4 = naclLowLevel.gf(),\n    den6 = naclLowLevel.gf();\n\n  naclLowLevel.set25519(r[2], gf1);\n  naclLowLevel.unpack25519(r[1], p);\n  naclLowLevel.S(num, r[1]);\n  naclLowLevel.M(den, num, naclLowLevel.D);\n  naclLowLevel.Z(num, num, r[2]);\n  naclLowLevel.A(den, r[2], den);\n\n  naclLowLevel.S(den2, den);\n  naclLowLevel.S(den4, den2);\n  naclLowLevel.M(den6, den4, den2);\n  naclLowLevel.M(t, den6, num);\n  naclLowLevel.M(t, t, den);\n\n  naclLowLevel.pow2523(t, t);\n  naclLowLevel.M(t, t, num);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(t, t, den);\n  naclLowLevel.M(r[0], t, den);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) naclLowLevel.M(r[0], r[0], I);\n\n  naclLowLevel.S(chk, r[0]);\n  naclLowLevel.M(chk, chk, den);\n  if (neq25519(chk, num)) return 0;\n  return 1;\n}\nlet gf1 = naclLowLevel.gf([1]);\nlet I = naclLowLevel.gf([\n  0xa0b0,\n  0x4a0e,\n  0x1b27,\n  0xc4ee,\n  0xe478,\n  0xad2f,\n  0x1806,\n  0x2f43,\n  0xd7a7,\n  0x3dfb,\n  0x0099,\n  0x2b4d,\n  0xdf0b,\n  0x4fc1,\n  0x2480,\n  0x2b83,\n]);\nfunction neq25519(a, b) {\n  var c = new Uint8Array(32),\n    d = new Uint8Array(32);\n  naclLowLevel.pack25519(c, a);\n  naclLowLevel.pack25519(d, b);\n  return naclLowLevel.crypto_verify_32(c, 0, d, 0);\n}\n","// @flow\nimport nacl from 'tweetnacl';\nimport type {KeyPair} from 'tweetnacl';\n\nimport {toBuffer} from './util/to-buffer';\nimport {PublicKey} from './publickey';\n\n/**\n * An account key pair (public and secret keys).\n */\nexport class Account {\n  _keypair: KeyPair;\n\n  /**\n   * Create a new Account object\n   *\n   * If the secretKey parameter is not provided a new key pair is randomly\n   * created for the account\n   *\n   * @param secretKey Secret key for the account\n   */\n  constructor(secretKey?: Buffer | Uint8Array | Array<number>) {\n    if (secretKey) {\n      this._keypair = nacl.sign.keyPair.fromSecretKey(toBuffer(secretKey));\n    } else {\n      this._keypair = nacl.sign.keyPair();\n    }\n  }\n\n  /**\n   * The public key for this account\n   */\n  get publicKey(): PublicKey {\n    return new PublicKey(this._keypair.publicKey);\n  }\n\n  /**\n   * The **unencrypted** secret key for this account\n   */\n  get secretKey(): Buffer {\n    return this._keypair.secretKey;\n  }\n}\n","// @flow\n\n// TODO: These constants should be removed in favor of reading them out of a\n// Syscall account\n\n/**\n * @ignore\n */\nexport const NUM_TICKS_PER_SECOND = 160;\n\n/**\n * @ignore\n */\nexport const DEFAULT_TICKS_PER_SLOT = 64;\n\n/**\n * @ignore\n */\nexport const NUM_SLOTS_PER_SECOND =\n  NUM_TICKS_PER_SECOND / DEFAULT_TICKS_PER_SLOT;\n\n/**\n * @ignore\n */\nexport const MS_PER_SLOT = 1000 / NUM_SLOTS_PER_SECOND;\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * Layout for a public key\n */\nexport const publicKey = (property: string = 'publicKey'): Object => {\n  return BufferLayout.blob(32, property);\n};\n\n/**\n * Layout for a 64bit unsigned value\n */\nexport const uint64 = (property: string = 'uint64'): Object => {\n  return BufferLayout.blob(8, property);\n};\n\n/**\n * Layout for a Rust String type\n */\nexport const rustString = (property: string = 'string') => {\n  const rsl = BufferLayout.struct(\n    [\n      BufferLayout.u32('length'),\n      BufferLayout.u32('lengthPadding'),\n      BufferLayout.blob(BufferLayout.offset(BufferLayout.u32(), -8), 'chars'),\n    ],\n    property,\n  );\n  const _decode = rsl.decode.bind(rsl);\n  const _encode = rsl.encode.bind(rsl);\n\n  rsl.decode = (buffer, offset) => {\n    const data = _decode(buffer, offset);\n    return data.chars.toString('utf8');\n  };\n\n  rsl.encode = (str, buffer, offset) => {\n    const data = {\n      chars: Buffer.from(str, 'utf8'),\n    };\n    return _encode(data, buffer, offset);\n  };\n\n  rsl.alloc = str => {\n    return (\n      BufferLayout.u32().span +\n      BufferLayout.u32().span +\n      Buffer.from(str, 'utf8').length\n    );\n  };\n\n  return rsl;\n};\n\n/**\n * Layout for an Authorized object\n */\nexport const authorized = (property: string = 'authorized') => {\n  return BufferLayout.struct(\n    [publicKey('staker'), publicKey('withdrawer')],\n    property,\n  );\n};\n\n/**\n * Layout for a Lockup object\n */\nexport const lockup = (property: string = 'lockup') => {\n  return BufferLayout.struct(\n    [\n      BufferLayout.ns64('unixTimestamp'),\n      BufferLayout.ns64('epoch'),\n      publicKey('custodian'),\n    ],\n    property,\n  );\n};\n\nexport function getAlloc(type: Object, fields: Object): number {\n  let alloc = 0;\n  type.layout.fields.forEach(item => {\n    if (item.span >= 0) {\n      alloc += item.span;\n    } else if (typeof item.alloc === 'function') {\n      alloc += item.alloc(fields[item.property]);\n    }\n  });\n  return alloc;\n}\n","// @flow\n\nexport function decodeLength(bytes: Array<number>): number {\n  let len = 0;\n  let size = 0;\n  for (;;) {\n    let elem = bytes.shift();\n    len |= (elem & 0x7f) << (size * 7);\n    size += 1;\n    if ((elem & 0x80) === 0) {\n      break;\n    }\n  }\n  return len;\n}\n\nexport function encodeLength(bytes: Array<number>, len: number) {\n  let rem_len = len;\n  for (;;) {\n    let elem = rem_len & 0x7f;\n    rem_len >>= 7;\n    if (rem_len == 0) {\n      bytes.push(elem);\n      break;\n    } else {\n      elem |= 0x80;\n      bytes.push(elem);\n    }\n  }\n}\n","// @flow\n\nimport bs58 from 'bs58';\nimport * as BufferLayout from 'buffer-layout';\n\nimport {PublicKey} from './publickey';\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PACKET_DATA_SIZE} from './transaction';\nimport * as shortvec from './util/shortvec-encoding';\n\n/**\n * The message header, identifying signed and read-only account\n *\n * @typedef {Object} MessageHeader\n * @property {number} numRequiredSignatures The number of signatures required for this message to be considered valid\n * @property {number} numReadonlySignedAccounts: The last `numReadonlySignedAccounts` of the signed keys are read-only accounts\n * @property {number} numReadonlyUnsignedAccounts The last `numReadonlySignedAccounts` of the unsigned keys are read-only accounts\n */\nexport type MessageHeader = {\n  numRequiredSignatures: number,\n  numReadonlySignedAccounts: number,\n  numReadonlyUnsignedAccounts: number,\n};\n\n/**\n * An instruction to execute by a program\n *\n * @typedef {Object} CompiledInstruction\n * @property {number} programIdIndex Index into the transaction keys array indicating the program account that executes this instruction\n * @property {number[]} accounts Ordered indices into the transaction keys array indicating which accounts to pass to the program\n * @property {string} data The program input data encoded as base 58\n */\nexport type CompiledInstruction = {\n  programIdIndex: number,\n  accounts: number[],\n  data: string,\n};\n\n/**\n * Message constructor arguments\n *\n * @typedef {Object} MessageArgs\n * @property {MessageHeader} header The message header, identifying signed and read-only `accountKeys`\n * @property {string[]} accounts All the account keys used by this transaction\n * @property {Blockhash} recentBlockhash The hash of a recent ledger block\n * @property {CompiledInstruction[]} instructions Instructions that will be executed in sequence and committed in one atomic transaction if all succeed.\n */\ntype MessageArgs = {\n  header: MessageHeader,\n  accountKeys: string[],\n  recentBlockhash: Blockhash,\n  instructions: CompiledInstruction[],\n};\n\nconst PUBKEY_LENGTH = 32;\n\n/**\n * List of instructions to be processed atomically\n */\nexport class Message {\n  header: MessageHeader;\n  accountKeys: PublicKey[];\n  recentBlockhash: Blockhash;\n  instructions: CompiledInstruction[];\n\n  constructor(args: MessageArgs) {\n    this.header = args.header;\n    this.accountKeys = args.accountKeys.map(account => new PublicKey(account));\n    this.recentBlockhash = args.recentBlockhash;\n    this.instructions = args.instructions;\n  }\n\n  isAccountWritable(index: number): boolean {\n    return (\n      index <\n        this.header.numRequiredSignatures -\n          this.header.numReadonlySignedAccounts ||\n      (index >= this.header.numRequiredSignatures &&\n        index <\n          this.accountKeys.length - this.header.numReadonlyUnsignedAccounts)\n    );\n  }\n\n  serialize(): Buffer {\n    const numKeys = this.accountKeys.length;\n\n    let keyCount = [];\n    shortvec.encodeLength(keyCount, numKeys);\n\n    const instructions = this.instructions.map(instruction => {\n      const {accounts, programIdIndex} = instruction;\n      const data = bs58.decode(instruction.data);\n\n      let keyIndicesCount = [];\n      shortvec.encodeLength(keyIndicesCount, accounts.length);\n\n      let dataCount = [];\n      shortvec.encodeLength(dataCount, data.length);\n\n      return {\n        programIdIndex,\n        keyIndicesCount: Buffer.from(keyIndicesCount),\n        keyIndices: Buffer.from(accounts),\n        dataLength: Buffer.from(dataCount),\n        data,\n      };\n    });\n\n    let instructionCount = [];\n    shortvec.encodeLength(instructionCount, instructions.length);\n    let instructionBuffer = Buffer.alloc(PACKET_DATA_SIZE);\n    Buffer.from(instructionCount).copy(instructionBuffer);\n    let instructionBufferLength = instructionCount.length;\n\n    instructions.forEach(instruction => {\n      const instructionLayout = BufferLayout.struct([\n        BufferLayout.u8('programIdIndex'),\n\n        BufferLayout.blob(\n          instruction.keyIndicesCount.length,\n          'keyIndicesCount',\n        ),\n        BufferLayout.seq(\n          BufferLayout.u8('keyIndex'),\n          instruction.keyIndices.length,\n          'keyIndices',\n        ),\n        BufferLayout.blob(instruction.dataLength.length, 'dataLength'),\n        BufferLayout.seq(\n          BufferLayout.u8('userdatum'),\n          instruction.data.length,\n          'data',\n        ),\n      ]);\n      const length = instructionLayout.encode(\n        instruction,\n        instructionBuffer,\n        instructionBufferLength,\n      );\n      instructionBufferLength += length;\n    });\n    instructionBuffer = instructionBuffer.slice(0, instructionBufferLength);\n\n    const signDataLayout = BufferLayout.struct([\n      BufferLayout.blob(1, 'numRequiredSignatures'),\n      BufferLayout.blob(1, 'numReadonlySignedAccounts'),\n      BufferLayout.blob(1, 'numReadonlyUnsignedAccounts'),\n      BufferLayout.blob(keyCount.length, 'keyCount'),\n      BufferLayout.seq(Layout.publicKey('key'), numKeys, 'keys'),\n      Layout.publicKey('recentBlockhash'),\n    ]);\n\n    const transaction = {\n      numRequiredSignatures: Buffer.from([this.header.numRequiredSignatures]),\n      numReadonlySignedAccounts: Buffer.from([\n        this.header.numReadonlySignedAccounts,\n      ]),\n      numReadonlyUnsignedAccounts: Buffer.from([\n        this.header.numReadonlyUnsignedAccounts,\n      ]),\n      keyCount: Buffer.from(keyCount),\n      keys: this.accountKeys.map(key => key.toBuffer()),\n      recentBlockhash: bs58.decode(this.recentBlockhash),\n    };\n\n    let signData = Buffer.alloc(2048);\n    const length = signDataLayout.encode(transaction, signData);\n    instructionBuffer.copy(signData, length);\n    return signData.slice(0, length + instructionBuffer.length);\n  }\n\n  /**\n   * Decode a compiled message into a Message object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Message {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const numRequiredSignatures = byteArray.shift();\n    const numReadonlySignedAccounts = byteArray.shift();\n    const numReadonlyUnsignedAccounts = byteArray.shift();\n\n    const accountCount = shortvec.decodeLength(byteArray);\n    let accountKeys = [];\n    for (let i = 0; i < accountCount; i++) {\n      const account = byteArray.slice(0, PUBKEY_LENGTH);\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      accountKeys.push(bs58.encode(Buffer.from(account)));\n    }\n\n    const recentBlockhash = byteArray.slice(0, PUBKEY_LENGTH);\n    byteArray = byteArray.slice(PUBKEY_LENGTH);\n\n    const instructionCount = shortvec.decodeLength(byteArray);\n    let instructions = [];\n    for (let i = 0; i < instructionCount; i++) {\n      let instruction = {};\n      instruction.programIdIndex = byteArray.shift();\n      const accountCount = shortvec.decodeLength(byteArray);\n      instruction.accounts = byteArray.slice(0, accountCount);\n      byteArray = byteArray.slice(accountCount);\n      const dataLength = shortvec.decodeLength(byteArray);\n      const data = byteArray.slice(0, dataLength);\n      instruction.data = bs58.encode(Buffer.from(data));\n      byteArray = byteArray.slice(dataLength);\n      instructions.push(instruction);\n    }\n\n    const messageArgs = {\n      header: {\n        numRequiredSignatures,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      recentBlockhash: bs58.encode(Buffer.from(recentBlockhash)),\n      accountKeys,\n      instructions,\n    };\n\n    return new Message(messageArgs);\n  }\n}\n","// @flow\n\nimport invariant from 'assert';\nimport nacl from 'tweetnacl';\nimport bs58 from 'bs58';\n\nimport type {CompiledInstruction} from './message';\nimport {Message} from './message';\nimport {PublicKey} from './publickey';\nimport {Account} from './account';\nimport * as shortvec from './util/shortvec-encoding';\nimport type {Blockhash} from './blockhash';\n\n/**\n * @typedef {string} TransactionSignature\n */\nexport type TransactionSignature = string;\n\n/**\n * Default (empty) signature\n *\n * Signatures are 64 bytes in length\n */\nconst DEFAULT_SIGNATURE = Buffer.alloc(64).fill(0);\n\n/**\n * Maximum over-the-wire size of a Transaction\n *\n * 1280 is IPv6 minimum MTU\n * 40 bytes is the size of the IPv6 header\n * 8 bytes is the size of the fragment header\n */\nexport const PACKET_DATA_SIZE = 1280 - 40 - 8;\n\nconst SIGNATURE_LENGTH = 64;\n\n/**\n * Account metadata used to define instructions\n *\n * @typedef {Object} AccountMeta\n * @property {PublicKey} pubkey An account's public key\n * @property {boolean} isSigner True if an instruction requires a transaction signature matching `pubkey`\n * @property {boolean} isWritable True if the `pubkey` can be loaded as a read-write account.\n */\nexport type AccountMeta = {\n  pubkey: PublicKey,\n  isSigner: boolean,\n  isWritable: boolean,\n};\n\n/**\n * List of TransactionInstruction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionInstructionCtorFields\n * @property {?Array<PublicKey>} keys\n * @property {?PublicKey} programId\n * @property {?Buffer} data\n */\nexport type TransactionInstructionCtorFields = {|\n  keys?: Array<AccountMeta>,\n  programId?: PublicKey,\n  data?: Buffer,\n|};\n\n/**\n * Transaction Instruction class\n */\nexport class TransactionInstruction {\n  /**\n   * Public keys to include in this transaction\n   * Boolean represents whether this pubkey needs to sign the transaction\n   */\n  keys: Array<AccountMeta> = [];\n\n  /**\n   * Program Id to execute\n   */\n  programId: PublicKey;\n\n  /**\n   * Program input\n   */\n  data: Buffer = Buffer.alloc(0);\n\n  constructor(opts?: TransactionInstructionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n}\n\n/**\n * @private\n */\ntype SignaturePubkeyPair = {|\n  signature: Buffer | null,\n  publicKey: PublicKey,\n|};\n\n/**\n * List of Transaction object fields that may be initialized at construction\n *\n * @typedef {Object} TransactionCtorFields\n * @property {?Blockhash} recentBlockhash A recent blockhash\n * @property {?Array<SignaturePubkeyPair>} signatures One or more signatures\n *\n */\ntype TransactionCtorFields = {|\n  recentBlockhash?: Blockhash | null,\n  nonceInfo?: NonceInformation | null,\n  signatures?: Array<SignaturePubkeyPair>,\n|};\n\n/**\n * NonceInformation to be used to build a Transaction.\n *\n * @typedef {Object} NonceInformation\n * @property {Blockhash} nonce The current Nonce blockhash\n * @property {TransactionInstruction} nonceInstruction AdvanceNonceAccount Instruction\n */\ntype NonceInformation = {|\n  nonce: Blockhash,\n  nonceInstruction: TransactionInstruction,\n|};\n\n/**\n * Transaction class\n */\nexport class Transaction {\n  /**\n   * Signatures for the transaction.  Typically created by invoking the\n   * `sign()` method\n   */\n  signatures: Array<SignaturePubkeyPair> = [];\n\n  /**\n   * The first (payer) Transaction signature\n   */\n  get signature(): Buffer | null {\n    if (this.signatures.length > 0) {\n      return this.signatures[0].signature;\n    }\n    return null;\n  }\n\n  /**\n   * The instructions to atomically execute\n   */\n  instructions: Array<TransactionInstruction> = [];\n\n  /**\n   * A recent transaction id.  Must be populated by the caller\n   */\n  recentBlockhash: Blockhash | null;\n\n  /**\n   * Optional Nonce information. If populated, transaction will use a durable\n   * Nonce hash instead of a recentBlockhash. Must be populated by the caller\n   */\n  nonceInfo: NonceInformation | null;\n\n  /**\n   * Construct an empty Transaction\n   */\n  constructor(opts?: TransactionCtorFields) {\n    opts && Object.assign(this, opts);\n  }\n\n  /**\n   * Add one or more instructions to this Transaction\n   */\n  add(\n    ...items: Array<\n      Transaction | TransactionInstruction | TransactionInstructionCtorFields,\n    >\n  ): Transaction {\n    if (items.length === 0) {\n      throw new Error('No instructions');\n    }\n\n    items.forEach((item: any) => {\n      if ('instructions' in item) {\n        this.instructions = this.instructions.concat(item.instructions);\n      } else if ('data' in item && 'programId' in item && 'keys' in item) {\n        this.instructions.push(item);\n      } else {\n        this.instructions.push(new TransactionInstruction(item));\n      }\n    });\n    return this;\n  }\n\n  /**\n   * Compile transaction data\n   */\n  compileMessage(): Message {\n    const {nonceInfo} = this;\n    if (nonceInfo && this.instructions[0] != nonceInfo.nonceInstruction) {\n      this.recentBlockhash = nonceInfo.nonce;\n      this.instructions.unshift(nonceInfo.nonceInstruction);\n    }\n    const {recentBlockhash} = this;\n    if (!recentBlockhash) {\n      throw new Error('Transaction recentBlockhash required');\n    }\n\n    if (this.instructions.length < 1) {\n      throw new Error('No instructions provided');\n    }\n\n    let numReadonlySignedAccounts = 0;\n    let numReadonlyUnsignedAccounts = 0;\n\n    const programIds: string[] = [];\n    const accountMetas: AccountMeta[] = [];\n    this.instructions.forEach(instruction => {\n      instruction.keys.forEach(accountMeta => {\n        accountMetas.push(accountMeta);\n      });\n\n      const programId = instruction.programId.toString();\n      if (!programIds.includes(programId)) {\n        programIds.push(programId);\n      }\n    });\n\n    // Append programID account metas\n    programIds.forEach(programId => {\n      accountMetas.push({\n        pubkey: new PublicKey(programId),\n        isSigner: false,\n        isWritable: false,\n      });\n    });\n\n    // Prefix accountMetas with feePayer here whenever that gets implemented\n\n    // Sort. Prioritizing first by signer, then by writable\n    accountMetas.sort(function (x, y) {\n      const checkSigner = x.isSigner === y.isSigner ? 0 : x.isSigner ? -1 : 1;\n      const checkWritable =\n        x.isWritable === y.isWritable ? 0 : x.isWritable ? -1 : 1;\n      return checkSigner || checkWritable;\n    });\n\n    // Cull duplicate account metas\n    const uniqueMetas: AccountMeta[] = [];\n    accountMetas.forEach(accountMeta => {\n      const pubkeyString = accountMeta.pubkey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === pubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isWritable =\n          uniqueMetas[uniqueIndex].isWritable || accountMeta.isWritable;\n      } else {\n        uniqueMetas.push(accountMeta);\n      }\n    });\n\n    this.signatures.forEach(signature => {\n      const sigPubkeyString = signature.publicKey.toString();\n      const uniqueIndex = uniqueMetas.findIndex(x => {\n        return x.pubkey.toString() === sigPubkeyString;\n      });\n      if (uniqueIndex > -1) {\n        uniqueMetas[uniqueIndex].isSigner = true;\n      } else {\n        uniqueMetas.unshift({\n          pubkey: new PublicKey(sigPubkeyString),\n          isSigner: true,\n          isWritable: true,\n        });\n      }\n    });\n\n    // Split out signing from nonsigning keys and count readonlys\n    const signedKeys: string[] = [];\n    const unsignedKeys: string[] = [];\n    uniqueMetas.forEach(({pubkey, isSigner, isWritable}) => {\n      if (isSigner) {\n        // Promote the first signer to writable as it is the fee payer\n        const first = signedKeys.length === 0;\n        signedKeys.push(pubkey.toString());\n        if (!first && !isWritable) {\n          numReadonlySignedAccounts += 1;\n        }\n      } else {\n        unsignedKeys.push(pubkey.toString());\n        if (!isWritable) {\n          numReadonlyUnsignedAccounts += 1;\n        }\n      }\n    });\n\n    // Initialize signature array, if needed\n    if (this.signatures.length === 0) {\n      const signatures: Array<SignaturePubkeyPair> = [];\n      signedKeys.forEach(pubkey => {\n        signatures.push({signature: null, publicKey: new PublicKey(pubkey)});\n      });\n      this.signatures = signatures;\n    }\n\n    const accountKeys = signedKeys.concat(unsignedKeys);\n    const instructions: CompiledInstruction[] = this.instructions.map(\n      instruction => {\n        const {data, programId} = instruction;\n        return {\n          programIdIndex: accountKeys.indexOf(programId.toString()),\n          accounts: instruction.keys.map(keyObj =>\n            accountKeys.indexOf(keyObj.pubkey.toString()),\n          ),\n          data: bs58.encode(data),\n        };\n      },\n    );\n\n    instructions.forEach(instruction => {\n      invariant(instruction.programIdIndex >= 0);\n      instruction.accounts.forEach(keyIndex => invariant(keyIndex >= 0));\n    });\n\n    return new Message({\n      header: {\n        numRequiredSignatures: this.signatures.length,\n        numReadonlySignedAccounts,\n        numReadonlyUnsignedAccounts,\n      },\n      accountKeys,\n      recentBlockhash,\n      instructions,\n    });\n  }\n\n  /**\n   * Get a buffer of the Transaction data that need to be covered by signatures\n   */\n  serializeMessage(): Buffer {\n    return this.compileMessage().serialize();\n  }\n\n  /**\n   * Sign the Transaction with the specified accounts.  Multiple signatures may\n   * be applied to a Transaction. The first signature is considered \"primary\"\n   * and is used when testing for Transaction confirmation.\n   *\n   * Transaction fields should not be modified after the first call to `sign`,\n   * as doing so may invalidate the signature and cause the Transaction to be\n   * rejected.\n   *\n   * The Transaction must be assigned a valid `recentBlockhash` before invoking this method\n   */\n  sign(...signers: Array<Account>) {\n    this.signPartial(...signers);\n  }\n\n  /**\n   * Partially sign a Transaction with the specified accounts.  The `Account`\n   * inputs will be used to sign the Transaction immediately, while any\n   * `PublicKey` inputs will be referenced in the signed Transaction but need to\n   * be filled in later by calling `addSigner()` with the matching `Account`.\n   *\n   * All the caveats from the `sign` method apply to `signPartial`\n   */\n  signPartial(...partialSigners: Array<PublicKey | Account>) {\n    if (partialSigners.length === 0) {\n      throw new Error('No signers');\n    }\n\n    function partialSignerPublicKey(accountOrPublicKey: any): PublicKey {\n      if ('publicKey' in accountOrPublicKey) {\n        return accountOrPublicKey.publicKey;\n      }\n      return accountOrPublicKey;\n    }\n\n    function signerAccount(accountOrPublicKey: any): ?Account {\n      if (\n        'publicKey' in accountOrPublicKey &&\n        'secretKey' in accountOrPublicKey\n      ) {\n        return accountOrPublicKey;\n      }\n    }\n\n    const signatures: Array<SignaturePubkeyPair> = partialSigners.map(\n      accountOrPublicKey => ({\n        signature: null,\n        publicKey: partialSignerPublicKey(accountOrPublicKey),\n      }),\n    );\n    this.signatures = signatures;\n    const signData = this.serializeMessage();\n\n    partialSigners.forEach((accountOrPublicKey, index) => {\n      const account = signerAccount(accountOrPublicKey);\n      if (account) {\n        const signature = nacl.sign.detached(signData, account.secretKey);\n        invariant(signature.length === 64);\n        signatures[index].signature = Buffer.from(signature);\n      }\n    });\n  }\n\n  /**\n   * Fill in a signature for a partially signed Transaction.  The `signer` must\n   * be the corresponding `Account` for a `PublicKey` that was previously provided to\n   * `signPartial`\n   */\n  addSigner(signer: Account) {\n    const signData = this.serializeMessage();\n    const signature = nacl.sign.detached(signData, signer.secretKey);\n    this.addSignature(signer.publicKey, signature);\n  }\n\n  /**\n   * Add an externally created signature to a transaction\n   */\n  addSignature(pubkey: PublicKey, signature: Buffer) {\n    invariant(signature.length === 64);\n\n    const index = this.signatures.findIndex(sigpair =>\n      pubkey.equals(sigpair.publicKey),\n    );\n    if (index < 0) {\n      throw new Error(`Unknown signer: ${pubkey.toString()}`);\n    }\n\n    this.signatures[index].signature = Buffer.from(signature);\n  }\n\n  /**\n   * Verify signatures of a complete, signed Transaction\n   */\n  verifySignatures(): boolean {\n    return this._verifySignatures(this.serializeMessage());\n  }\n\n  /**\n   * @private\n   */\n  _verifySignatures(signData: Buffer): boolean {\n    let verified = true;\n    for (const {signature, publicKey} of this.signatures) {\n      if (\n        !nacl.sign.detached.verify(signData, signature, publicKey.toBuffer())\n      ) {\n        verified = false;\n      }\n    }\n    return verified;\n  }\n\n  /**\n   * Serialize the Transaction in the wire format.\n   *\n   * The Transaction must have a valid `signature` before invoking this method\n   */\n  serialize(): Buffer {\n    const {signatures} = this;\n    if (!signatures || signatures.length === 0) {\n      throw new Error('Transaction has not been signed');\n    }\n\n    const signData = this.serializeMessage();\n    if (!this._verifySignatures(signData)) {\n      throw new Error('Transaction has not been signed correctly');\n    }\n\n    return this._serialize(signData);\n  }\n\n  /**\n   * @private\n   */\n  _serialize(signData: Buffer): Buffer {\n    const {signatures} = this;\n    const signatureCount = [];\n    shortvec.encodeLength(signatureCount, signatures.length);\n    const transactionLength =\n      signatureCount.length + signatures.length * 64 + signData.length;\n    const wireTransaction = Buffer.alloc(transactionLength);\n    invariant(signatures.length < 256);\n    Buffer.from(signatureCount).copy(wireTransaction, 0);\n    signatures.forEach(({signature}, index) => {\n      if (signature !== null) {\n        invariant(signature.length === 64, `signature has invalid length`);\n        Buffer.from(signature).copy(\n          wireTransaction,\n          signatureCount.length + index * 64,\n        );\n      }\n    });\n    signData.copy(\n      wireTransaction,\n      signatureCount.length + signatures.length * 64,\n    );\n    invariant(\n      wireTransaction.length <= PACKET_DATA_SIZE,\n      `Transaction too large: ${wireTransaction.length} > ${PACKET_DATA_SIZE}`,\n    );\n    return wireTransaction;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get keys(): Array<PublicKey> {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].keys.map(keyObj => keyObj.pubkey);\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get programId(): PublicKey {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].programId;\n  }\n\n  /**\n   * Deprecated method\n   * @private\n   */\n  get data(): Buffer {\n    invariant(this.instructions.length === 1);\n    return this.instructions[0].data;\n  }\n\n  /**\n   * Parse a wire transaction into a Transaction object.\n   */\n  static from(buffer: Buffer | Uint8Array | Array<number>): Transaction {\n    // Slice up wire data\n    let byteArray = [...buffer];\n\n    const signatureCount = shortvec.decodeLength(byteArray);\n    let signatures = [];\n    for (let i = 0; i < signatureCount; i++) {\n      const signature = byteArray.slice(0, SIGNATURE_LENGTH);\n      byteArray = byteArray.slice(SIGNATURE_LENGTH);\n      signatures.push(bs58.encode(Buffer.from(signature)));\n    }\n\n    return Transaction.populate(Message.from(byteArray), signatures);\n  }\n\n  /**\n   * Populate Transaction object from message and signatures\n   */\n  static populate(message: Message, signatures: Array<string>): Transaction {\n    const transaction = new Transaction();\n    transaction.recentBlockhash = message.recentBlockhash;\n    signatures.forEach((signature, index) => {\n      const sigPubkeyPair = {\n        signature:\n          signature == bs58.encode(DEFAULT_SIGNATURE)\n            ? null\n            : bs58.decode(signature),\n        publicKey: message.accountKeys[index],\n      };\n      transaction.signatures.push(sigPubkeyPair);\n    });\n\n    message.instructions.forEach(instruction => {\n      const keys = instruction.accounts.map(account => {\n        const pubkey = message.accountKeys[account];\n        return {\n          pubkey,\n          isSigner: transaction.signatures.some(\n            keyObj => keyObj.publicKey.toString() === pubkey.toString(),\n          ),\n          isWritable: message.isAccountWritable(account),\n        };\n      });\n\n      transaction.instructions.push(\n        new TransactionInstruction({\n          keys,\n          programId: message.accountKeys[instruction.programIdIndex],\n          data: bs58.decode(instruction.data),\n        }),\n      );\n    });\n\n    return transaction;\n  }\n}\n","// @flow\nimport {PublicKey} from './publickey';\n\nexport const SYSVAR_CLOCK_PUBKEY = new PublicKey(\n  'SysvarC1ock11111111111111111111111111111111',\n);\n\nexport const SYSVAR_RECENT_BLOCKHASHES_PUBKEY = new PublicKey(\n  'SysvarRecentB1ockHashes11111111111111111111',\n);\n\nexport const SYSVAR_RENT_PUBKEY = new PublicKey(\n  'SysvarRent111111111111111111111111111111111',\n);\n\nexport const SYSVAR_REWARDS_PUBKEY = new PublicKey(\n  'SysvarRewards111111111111111111111111111111',\n);\n\nexport const SYSVAR_STAKE_HISTORY_PUBKEY = new PublicKey(\n  'SysvarStakeHistory1111111111111111111111111',\n);\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\n/**\n * https://github.com/solana-labs/solana/blob/90bedd7e067b5b8f3ddbb45da00a4e9cabb22c62/sdk/src/fee_calculator.rs#L7-L11\n *\n * @private\n */\nexport const FeeCalculatorLayout = BufferLayout.nu64('lamportsPerSignature');\n\n/**\n * @typedef {Object} FeeCalculator\n * @property {number} lamportsPerSignature lamports Cost in lamports to validate a signature\n */\nexport type FeeCalculator = {\n  lamportsPerSignature: number,\n};\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport type {Blockhash} from './blockhash';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport type {FeeCalculator} from './fee-calculator';\nimport {FeeCalculatorLayout} from './fee-calculator';\nimport {toBuffer} from './util/to-buffer';\n\n/**\n * See https://github.com/solana-labs/solana/blob/0ea2843ec9cdc517572b8e62c959f41b55cf4453/sdk/src/nonce_state.rs#L29-L32\n *\n * @private\n */\nconst NonceAccountLayout = BufferLayout.struct([\n  BufferLayout.u32('version'),\n  BufferLayout.u32('state'),\n  Layout.publicKey('authorizedPubkey'),\n  Layout.publicKey('nonce'),\n  BufferLayout.struct([FeeCalculatorLayout], 'feeCalculator'),\n]);\n\nexport const NONCE_ACCOUNT_LENGTH = NonceAccountLayout.span;\n\n/**\n * NonceAccount class\n */\nexport class NonceAccount {\n  authorizedPubkey: PublicKey;\n  nonce: Blockhash;\n  feeCalculator: FeeCalculator;\n\n  /**\n   * Deserialize NonceAccount from the account data.\n   *\n   * @param buffer account data\n   * @return NonceAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): NonceAccount {\n    const nonceAccount = NonceAccountLayout.decode(toBuffer(buffer), 0);\n    nonceAccount.authorizedPubkey = new PublicKey(\n      nonceAccount.authorizedPubkey,\n    );\n    nonceAccount.nonce = new PublicKey(nonceAccount.nonce).toString();\n    return nonceAccount;\n  }\n}\n","// @flow\n\n// zzz\nexport function sleep(ms: number): Promise<void> {\n  return new Promise(resolve => setTimeout(resolve, ms));\n}\n","// @flow\n\nimport assert from 'assert';\nimport bs58 from 'bs58';\nimport {parse as urlParse, format as urlFormat} from 'url';\nimport fetch from 'node-fetch';\nimport jayson from 'jayson/lib/client/browser';\nimport {struct} from 'superstruct';\nimport {Client as RpcWebSocketClient} from 'rpc-websockets';\n\nimport {NonceAccount} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {MS_PER_SLOT} from './timing';\nimport {Transaction} from './transaction';\nimport {Message} from './message';\nimport {sleep} from './util/sleep';\nimport {toBuffer} from './util/to-buffer';\nimport type {Blockhash} from './blockhash';\nimport type {FeeCalculator} from './fee-calculator';\nimport type {Account} from './account';\nimport type {TransactionSignature} from './transaction';\n\nexport const BLOCKHASH_CACHE_TIMEOUT_MS = 30 * 1000;\n\ntype RpcRequest = (methodName: string, args: Array<any>) => any;\n\ntype TokenAccountsFilter =\n  | {|\n      mint: PublicKey,\n    |}\n  | {|\n      programId: PublicKey,\n    |};\n\n/**\n * Extra contextual information for RPC responses\n *\n * @typedef {Object} Context\n * @property {number} slot\n */\ntype Context = {\n  slot: number,\n};\n\n/**\n * Options for sending transactions\n *\n * @typedef {Object} SendOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n */\nexport type SendOptions = {\n  skipPreflight?: boolean,\n};\n\n/**\n * Options for confirming transactions\n *\n * @typedef {Object} ConfirmOptions\n * @property {boolean | undefined} skipPreflight disable transaction verification step\n * @property {number | undefined} confirmations desired number of cluster confirmations\n */\nexport type ConfirmOptions = {\n  skipPreflight?: boolean,\n  confirmations?: number,\n};\n\n/**\n * Options for getConfirmedSignaturesForAddress2\n *\n * @typedef {Object} ConfirmedSignaturesForAddress2Options\n * @property {TransactionSignature | undefined} before start searching backwards from this transaction signature.\n *               If not provided the search starts from the highest max confirmed block.\n * @property {number | undefined} limit maximum transaction signatures to return (between 1 and 1,000, default: 1,000).\n *\n */\nexport type ConfirmedSignaturesForAddress2Options = {\n  before?: TransactionSignature,\n  limit?: number,\n};\n\n/**\n * RPC Response with extra contextual information\n *\n * @typedef {Object} RpcResponseAndContext\n * @property {Context} context\n * @property {T} value response\n */\ntype RpcResponseAndContext<T> = {\n  context: Context,\n  value: T,\n};\n\n/**\n * @private\n */\nfunction jsonRpcResultAndContext(resultDescription: any) {\n  return jsonRpcResult({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * @private\n */\nfunction jsonRpcResult(resultDescription: any) {\n  const jsonRpcVersion = struct.literal('2.0');\n  return struct.union([\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'any',\n    }),\n    struct({\n      jsonrpc: jsonRpcVersion,\n      id: 'string',\n      error: 'null?',\n      result: resultDescription,\n    }),\n  ]);\n}\n\n/**\n * @private\n */\nfunction notificationResultAndContext(resultDescription: any) {\n  return struct({\n    context: struct({\n      slot: 'number',\n    }),\n    value: resultDescription,\n  });\n}\n\n/**\n * The level of commitment desired when querying state\n * <pre>\n *   'max':    Query the most recent block which has been finalized by the cluster\n *   'recent': Query the most recent block which has reached 1 confirmation by the connected node\n *   'root':   Query the most recent block which has been rooted by the connected node\n *   'single': Query the most recent block which has reached 1 confirmation by the cluster\n *   'singleGossip': Query the most recent block which has reached 1 confirmation according to votes seen in gossip\n * </pre>\n *\n * @typedef {'max' | 'recent' | 'root' | 'single' | 'singleGossip'} Commitment\n */\nexport type Commitment = 'max' | 'recent' | 'root' | 'single' | 'singleGossip';\n\n/**\n * Filter for largest accounts query\n * <pre>\n *   'circulating':    Return the largest accounts that are part of the circulating supply\n *   'nonCirculating': Return the largest accounts that are not part of the circulating supply\n * </pre>\n *\n * @typedef {'circulating' | 'nonCirculating'} LargestAccountsFilter\n */\nexport type LargestAccountsFilter = 'circulating' | 'nonCirculating';\n\n/**\n * Configuration object for changing `getLargestAccounts` query behavior\n *\n * @typedef {Object} GetLargestAccountsConfig\n * @property {Commitment|undefined} commitment The level of commitment desired\n * @property {LargestAccountsFilter|undefined} filter Filter largest accounts by whether they are part of the circulating supply\n */\ntype GetLargestAccountsConfig = {\n  commitment: ?Commitment,\n  filter: ?LargestAccountsFilter,\n};\n\n/**\n * Configuration object for changing query behavior\n *\n * @typedef {Object} SignatureStatusConfig\n * @property {boolean} searchTransactionHistory enable searching status history, not needed for recent transactions\n */\nexport type SignatureStatusConfig = {\n  searchTransactionHistory: boolean,\n};\n\n/**\n * Information describing a cluster node\n *\n * @typedef {Object} ContactInfo\n * @property {string} pubkey Identity public key of the node\n * @property {string|null} gossip Gossip network address for the node\n * @property {string|null} tpu TPU network address for the node (null if not available)\n * @property {string|null} rpc JSON RPC network address for the node (null if not available)\n * @property {string|null} version Software version of the node (null if not available)\n */\ntype ContactInfo = {\n  pubkey: string,\n  gossip: string | null,\n  tpu: string | null,\n  rpc: string | null,\n  version: string | null,\n};\n\n/**\n * Information describing a vote account\n *\n * @typedef {Object} VoteAccountInfo\n * @property {string} votePubkey Public key of the vote account\n * @property {string} nodePubkey Identity public key of the node voting with this account\n * @property {number} activatedStake The stake, in lamports, delegated to this vote account and activated\n * @property {boolean} epochVoteAccount Whether the vote account is staked for this epoch\n * @property {Array<Array<number>>} epochCredits Recent epoch voting credit history for this voter\n * @property {number} commission A percentage (0-100) of rewards payout owed to the voter\n * @property {number} lastVote Most recent slot voted on by this vote account\n */\ntype VoteAccountInfo = {\n  votePubkey: string,\n  nodePubkey: string,\n  activatedStake: number,\n  epochVoteAccount: boolean,\n  epochCredits: Array<[number, number, number]>,\n  commission: number,\n  lastVote: number,\n};\n\n/**\n * A collection of cluster vote accounts\n *\n * @typedef {Object} VoteAccountStatus\n * @property {Array<VoteAccountInfo>} current Active vote accounts\n * @property {Array<VoteAccountInfo>} delinquent Inactive vote accounts\n */\ntype VoteAccountStatus = {\n  current: Array<VoteAccountInfo>,\n  delinquent: Array<VoteAccountInfo>,\n};\n\n/**\n * Network Inflation\n * (see https://docs.solana.com/implemented-proposals/ed_overview)\n *\n * @typedef {Object} InflationGovernor\n * @property {number} foundation\n * @property {number} foundation_term\n * @property {number} initial\n * @property {number} taper\n * @property {number} terminal\n */\ntype InflationGovernor = {\n  foundation: number,\n  foundationTerm: number,\n  initial: number,\n  taper: number,\n  terminal: number,\n};\n\nconst GetInflationGovernorResult = struct({\n  foundation: 'number',\n  foundationTerm: 'number',\n  initial: 'number',\n  taper: 'number',\n  terminal: 'number',\n});\n\n/**\n * Information about the current epoch\n *\n * @typedef {Object} EpochInfo\n * @property {number} epoch\n * @property {number} slotIndex\n * @property {number} slotsInEpoch\n * @property {number} absoluteSlot\n * @property {number} blockHeight\n */\ntype EpochInfo = {\n  epoch: number,\n  slotIndex: number,\n  slotsInEpoch: number,\n  absoluteSlot: number,\n  blockHeight: number | null,\n};\n\nconst GetEpochInfoResult = struct({\n  epoch: 'number',\n  slotIndex: 'number',\n  slotsInEpoch: 'number',\n  absoluteSlot: 'number',\n  blockHeight: 'number?',\n});\n\n/**\n * Epoch schedule\n * (see https://docs.solana.com/terminology#epoch)\n *\n * @typedef {Object} EpochSchedule\n * @property {number} slotsPerEpoch The maximum number of slots in each epoch\n * @property {number} leaderScheduleSlotOffset The number of slots before beginning of an epoch to calculate a leader schedule for that epoch\n * @property {boolean} warmup Indicates whether epochs start short and grow\n * @property {number} firstNormalEpoch The first epoch with `slotsPerEpoch` slots\n * @property {number} firstNormalSlot The first slot of `firstNormalEpoch`\n */\ntype EpochSchedule = {\n  slotsPerEpoch: number,\n  leaderScheduleSlotOffset: number,\n  warmup: boolean,\n  firstNormalEpoch: number,\n  firstNormalSlot: number,\n};\n\nconst GetEpochScheduleResult = struct({\n  slotsPerEpoch: 'number',\n  leaderScheduleSlotOffset: 'number',\n  warmup: 'boolean',\n  firstNormalEpoch: 'number',\n  firstNormalSlot: 'number',\n});\n\n/**\n * Leader schedule\n * (see https://docs.solana.com/terminology#leader-schedule)\n *\n * @typedef {Object} LeaderSchedule\n */\ntype LeaderSchedule = {\n  [address: string]: number[],\n};\n\nconst GetLeaderScheduleResult = struct.record([\n  'string',\n  struct.array(['number']),\n]);\n\n/**\n * Transaction error or null\n */\nconst TransactionErrorResult = struct.union(['null', 'object']);\n\n/**\n * Signature status for a transaction\n */\nconst SignatureStatusResult = struct({err: TransactionErrorResult});\n\n/**\n * Version info for a node\n *\n * @typedef {Object} Version\n * @property {string} solana-core Version of solana-core\n */\nconst Version = struct({\n  'solana-core': 'string',\n});\n\ntype SimulatedTransactionResponse = {\n  err: TransactionError | string | null,\n  logs: Array<string> | null,\n};\n\nconst SimulatedTransactionResponseValidator = jsonRpcResultAndContext(\n  struct.pick({\n    err: struct.union(['null', 'object', 'string']),\n    logs: struct.union(['null', struct.array(['string'])]),\n  }),\n);\n\n/**\n * Metadata for a confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransactionMeta\n * @property {number} fee The fee charged for processing the transaction\n * @property {Array<number>} preBalances The balances of the transaction accounts before processing\n * @property {Array<number>} postBalances The balances of the transaction accounts after processing\n * @property {object|null} err The error result of transaction processing\n */\ntype ConfirmedTransactionMeta = {\n  fee: number,\n  preBalances: Array<number>,\n  postBalances: Array<number>,\n  err: TransactionError | null,\n};\n\n/**\n * A confirmed transaction on the ledger\n *\n * @typedef {Object} ConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {Transaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n */\ntype ConfirmedTransaction = {\n  slot: number,\n  transaction: Transaction,\n  meta: ConfirmedTransactionMeta | null,\n};\n\n/**\n * A partially decoded transaction instruction\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {PublicKey} accounts Indicates if the account signed the transaction\n * @property {string} data Raw base-58 instruction data\n */\ntype PartiallyDecodedInstruction = {|\n  programId: PublicKey,\n  accounts: Array<PublicKey>,\n  data: string,\n|};\n\n/**\n * A parsed transaction message account\n *\n * @typedef {Object} ParsedMessageAccount\n * @property {PublicKey} pubkey Public key of the account\n * @property {boolean} signer Indicates if the account signed the transaction\n * @property {boolean} writable Indicates if the account is writable for this transaction\n */\ntype ParsedMessageAccount = {\n  pubkey: PublicKey,\n  signer: boolean,\n  writable: boolean,\n};\n\n/**\n * A parsed transaction instruction\n *\n * @typedef {Object} ParsedInstruction\n * @property {string} program Name of the program for this instruction\n * @property {PublicKey} programId ID of the program for this instruction\n * @property {any} parsed Parsed instruction info\n */\ntype ParsedInstruction = {|\n  program: string,\n  programId: PublicKey,\n  parsed: any,\n|};\n\n/**\n * A parsed transaction message\n *\n * @typedef {Object} ParsedMessage\n * @property {Array<ParsedMessageAccount>} accountKeys Accounts used in the instructions\n * @property {Array<ParsedInstruction | PartiallyDecodedInstruction>} instructions The atomically executed instructions for the transaction\n * @property {string} recentBlockhash Recent blockhash\n */\ntype ParsedMessage = {\n  accountKeys: ParsedMessageAccount[],\n  instructions: (ParsedInstruction | PartiallyDecodedInstruction)[],\n  recentBlockhash: string,\n};\n\n/**\n * A parsed transaction\n *\n * @typedef {Object} ParsedTransaction\n * @property {Array<string>} signatures Signatures for the transaction\n * @property {ParsedMessage} message Message of the transaction\n */\ntype ParsedTransaction = {\n  signatures: Array<string>,\n  message: ParsedMessage,\n};\n\n/**\n * A parsed and confirmed transaction on the ledger\n *\n * @typedef {Object} ParsedConfirmedTransaction\n * @property {number} slot The slot during which the transaction was processed\n * @property {ParsedTransaction} transaction The details of the transaction\n * @property {ConfirmedTransactionMeta|null} meta Metadata produced from the transaction\n */\ntype ParsedConfirmedTransaction = {\n  slot: number,\n  transaction: ParsedTransaction,\n  meta: ConfirmedTransactionMeta | null,\n};\n\n/**\n * A ConfirmedBlock on the ledger\n *\n * @typedef {Object} ConfirmedBlock\n * @property {Blockhash} blockhash Blockhash of this block\n * @property {Blockhash} previousBlockhash Blockhash of this block's parent\n * @property {number} parentSlot Slot index of this block's parent\n * @property {Array<object>} transactions Vector of transactions and status metas\n * @property {Array<object>} rewards Vector of block rewards\n */\ntype ConfirmedBlock = {\n  blockhash: Blockhash,\n  previousBlockhash: Blockhash,\n  parentSlot: number,\n  transactions: Array<{\n    transaction: Transaction,\n    meta: ConfirmedTransactionMeta | null,\n  }>,\n  rewards: Array<{\n    pubkey: string,\n    lamports: number,\n  }>,\n};\n\nfunction createRpcRequest(url): RpcRequest {\n  const server = jayson(async (request, callback) => {\n    const options = {\n      method: 'POST',\n      body: request,\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    };\n\n    try {\n      let too_many_requests_retries = 5;\n      let res = {};\n\n      for (;;) {\n        res = await fetch(url, options);\n        if (\n          res.status !== 429 /* Too many requests */ ||\n          too_many_requests_retries === 0\n        ) {\n          break;\n        }\n\n        console.log(\n          `Server responded with ${res.status} ${res.statusText}.  Retrying after brief delay...`,\n        );\n        await sleep(500);\n        too_many_requests_retries -= 1;\n      }\n\n      const text = await res.text();\n      if (res.ok) {\n        callback(null, text);\n      } else {\n        callback(new Error(`${res.status} ${res.statusText}: ${text}`));\n      }\n    } catch (err) {\n      callback(err);\n    }\n  });\n\n  return (method, args) => {\n    return new Promise((resolve, reject) => {\n      server.request(method, args, (err, response) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(response);\n      });\n    });\n  };\n}\n\n/**\n * Expected JSON RPC response for the \"getInflationGovernor\" message\n */\nconst GetInflationGovernorRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetInflationGovernorResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochInfo\" message\n */\nconst GetEpochInfoRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getEpochSchedule\" message\n */\nconst GetEpochScheduleRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: GetEpochScheduleResult,\n});\n\n/**\n * Expected JSON RPC response for the \"getLeaderSchedule\" message\n */\nconst GetLeaderScheduleRpcResult = jsonRpcResult(GetLeaderScheduleResult);\n\n/**\n * Expected JSON RPC response for the \"getBalance\" message\n */\nconst GetBalanceAndContextRpcResult = jsonRpcResultAndContext('number?');\n\n/**\n * Expected JSON RPC response for the \"getBlockTime\" message\n */\nconst GetBlockTimeRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: struct.union(['null', 'number', 'undefined']),\n});\n\n/**\n * Expected JSON RPC response for the \"minimumLedgerSlot\" and \"getFirstAvailableBlock\" messages\n */\nconst SlotRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: 'number',\n});\n\n/**\n * Supply\n *\n * @typedef {Object} Supply\n * @property {number} total Total supply in lamports\n * @property {number} circulating Circulating supply in lamports\n * @property {number} nonCirculating Non-circulating supply in lamports\n * @property {Array<PublicKey>} nonCirculatingAccounts List of non-circulating account addresses\n */\ntype Supply = {\n  total: number,\n  circulating: number,\n  nonCirculating: number,\n  nonCirculatingAccounts: Array<PublicKey>,\n};\n\n/**\n * Expected JSON RPC response for the \"getSupply\" message\n */\nconst GetSupplyRpcResult = jsonRpcResultAndContext(\n  struct({\n    total: 'number',\n    circulating: 'number',\n    nonCirculating: 'number',\n    nonCirculatingAccounts: struct.array(['string']),\n  }),\n);\n\n/**\n * Token amount object which returns a token amount in different formats\n * for various client use cases.\n *\n * @typedef {Object} TokenAmount\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAmount = {\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC structure for token amounts\n */\nconst TokenAmountResult = struct.object({\n  amount: 'string',\n  uiAmount: 'number',\n  decimals: 'number',\n});\n\n/**\n * Token address and balance.\n *\n * @typedef {Object} TokenAccountBalancePair\n * @property {PublicKey} address Address of the token account\n * @property {string} amount Raw amount of tokens as string ignoring decimals\n * @property {number} decimals Number of decimals configured for token's mint\n * @property {number} uiAmount Token account as float, accounts for decimals\n */\ntype TokenAccountBalancePair = {\n  address: PublicKey,\n  amount: string,\n  decimals: number,\n  uiAmount: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getTokenLargestAccounts\" message\n */\nconst GetTokenLargestAccountsResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.pick({\n      address: 'string',\n      amount: 'string',\n      uiAmount: 'number',\n      decimals: 'number',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountBalance\" message\n */\nconst GetTokenAccountBalance = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenSupply\" message\n */\nconst GetTokenSupplyRpcResult = jsonRpcResultAndContext(TokenAmountResult);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message\n */\nconst GetTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: ['string', struct.literal('base64')],\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTokenAccountsByOwner\" message with parsed data\n */\nconst GetParsedTokenAccountsByOwner = jsonRpcResultAndContext(\n  struct.array([\n    struct.object({\n      pubkey: 'string',\n      account: struct.object({\n        executable: 'boolean',\n        owner: 'string',\n        lamports: 'number',\n        data: struct.pick({\n          program: 'string',\n          parsed: 'any',\n          space: 'number',\n        }),\n        rentEpoch: 'number?',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Pair of an account address and its balance\n *\n * @typedef {Object} AccountBalancePair\n * @property {PublicKey} address\n * @property {number} lamports\n */\ntype AccountBalancePair = {\n  address: PublicKey,\n  lamports: number,\n};\n\n/**\n * Expected JSON RPC response for the \"getLargestAccounts\" message\n */\nconst GetLargestAccountsRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct({\n      lamports: 'number',\n      address: 'string',\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVersion\" message\n */\nconst GetVersionRpcResult = struct({\n  jsonrpc: struct.literal('2.0'),\n  id: 'string',\n  error: 'any?',\n  result: Version,\n});\n\n/**\n * @private\n */\nconst AccountInfoResult = struct({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: 'any',\n  rentEpoch: 'number?',\n});\n\n/**\n * @private\n */\nconst ParsedAccountInfoResult = struct.object({\n  executable: 'boolean',\n  owner: 'string',\n  lamports: 'number',\n  data: struct.union([\n    ['string', struct.literal('base64')],\n    struct.pick({\n      program: 'string',\n      parsed: 'any',\n      space: 'number',\n    }),\n  ]),\n  rentEpoch: 'number?',\n});\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message\n */\nconst GetAccountInfoAndContextRpcResult = jsonRpcResultAndContext(\n  struct.union(['null', AccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getAccountInfo\" message with jsonParsed param\n */\nconst GetParsedAccountInfoResult = jsonRpcResultAndContext(\n  struct.union(['null', ParsedAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress\" message\n */\nconst GetConfirmedSignaturesForAddressRpcResult = jsonRpcResult(\n  struct.array(['string']),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedSignaturesForAddress2\" message\n */\n\nconst GetConfirmedSignaturesForAddress2RpcResult = jsonRpcResult(\n  struct.array([\n    struct({\n      signature: 'string',\n      slot: 'number',\n      err: TransactionErrorResult,\n      memo: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/***\n * Expected JSON RPC response for the \"accountNotification\" message\n */\nconst AccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(AccountInfoResult),\n});\n\n/**\n * @private\n */\nconst ProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: AccountInfoResult,\n});\n\n/**\n * @private\n */\nconst ParsedProgramAccountInfoResult = struct({\n  pubkey: 'string',\n  account: ParsedAccountInfoResult,\n});\n\n/***\n * Expected JSON RPC response for the \"programNotification\" message\n */\nconst ProgramAccountNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(ProgramAccountInfoResult),\n});\n\n/**\n * @private\n */\nconst SlotInfoResult = struct({\n  parent: 'number',\n  slot: 'number',\n  root: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"slotNotification\" message\n */\nconst SlotNotificationResult = struct({\n  subscription: 'number',\n  result: SlotInfoResult,\n});\n\n/**\n * Expected JSON RPC response for the \"signatureNotification\" message\n */\nconst SignatureNotificationResult = struct({\n  subscription: 'number',\n  result: notificationResultAndContext(SignatureStatusResult),\n});\n\n/**\n * Expected JSON RPC response for the \"rootNotification\" message\n */\nconst RootNotificationResult = struct({\n  subscription: 'number',\n  result: 'number',\n});\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getProgramAccounts\" message\n */\nconst GetParsedProgramAccountsRpcResult = jsonRpcResult(\n  struct.array([ParsedProgramAccountInfoResult]),\n);\n\n/**\n * Expected JSON RPC response for the \"getSlot\" message\n */\nconst GetSlot = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getSlotLeader\" message\n */\nconst GetSlotLeader = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"getClusterNodes\" message\n */\nconst GetClusterNodes = jsonRpcResult(\n  struct.array([\n    struct.pick({\n      pubkey: 'string',\n      gossip: struct.union(['null', 'string']),\n      tpu: struct.union(['null', 'string']),\n      rpc: struct.union(['null', 'string']),\n      version: struct.union(['null', 'string']),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getVoteAccounts\" message\n */\nconst GetVoteAccounts = jsonRpcResult(\n  struct({\n    current: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n    delinquent: struct.array([\n      struct.pick({\n        votePubkey: 'string',\n        nodePubkey: 'string',\n        activatedStake: 'number',\n        epochVoteAccount: 'boolean',\n        epochCredits: struct.array([\n          struct.tuple(['number', 'number', 'number']),\n        ]),\n        commission: 'number',\n        lastVote: 'number',\n        rootSlot: 'number?',\n      }),\n    ]),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getSignatureStatuses\" message\n */\nconst GetSignatureStatusesRpcResult = jsonRpcResultAndContext(\n  struct.array([\n    struct.union([\n      'null',\n      struct.pick({\n        slot: 'number',\n        confirmations: struct.union(['number', 'null']),\n        err: TransactionErrorResult,\n      }),\n    ]),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getTransactionCount\" message\n */\nconst GetTransactionCountRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getTotalSupply\" message\n */\nconst GetTotalSupplyRpcResult = jsonRpcResult('number');\n\n/**\n * Expected JSON RPC response for the \"getMinimumBalanceForRentExemption\" message\n */\nconst GetMinimumBalanceForRentExemptionRpcResult = jsonRpcResult('number');\n\n/**\n * @private\n */\nconst ConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array(['string']),\n    header: struct({\n      numRequiredSignatures: 'number',\n      numReadonlySignedAccounts: 'number',\n      numReadonlyUnsignedAccounts: 'number',\n    }),\n    instructions: struct.array([\n      struct({\n        accounts: struct.array(['number']),\n        data: 'string',\n        programIdIndex: 'number',\n      }),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ParsedConfirmedTransactionResult = struct({\n  signatures: struct.array(['string']),\n  message: struct({\n    accountKeys: struct.array([\n      struct({\n        pubkey: 'string',\n        signer: 'boolean',\n        writable: 'boolean',\n      }),\n    ]),\n    instructions: struct.array([\n      struct.union([\n        struct({\n          accounts: struct.array(['string']),\n          data: 'string',\n          programId: 'string',\n        }),\n        struct({\n          parsed: 'any',\n          program: 'string',\n          programId: 'string',\n        }),\n      ]),\n    ]),\n    recentBlockhash: 'string',\n  }),\n});\n\n/**\n * @private\n */\nconst ConfirmedTransactionMetaResult = struct.union([\n  'null',\n  struct.pick({\n    err: TransactionErrorResult,\n    fee: 'number',\n    preBalances: struct.array(['number']),\n    postBalances: struct.array(['number']),\n  }),\n]);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedBlock\" message\n */\nexport const GetConfirmedBlockRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      blockhash: 'string',\n      previousBlockhash: 'string',\n      parentSlot: 'number',\n      transactions: struct.array([\n        struct({\n          transaction: ConfirmedTransactionResult,\n          meta: ConfirmedTransactionMetaResult,\n        }),\n      ]),\n      rewards: struct.union([\n        'undefined',\n        struct.array([\n          struct({\n            pubkey: 'string',\n            lamports: 'number',\n          }),\n        ]),\n      ]),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ConfirmedTransactionResult,\n      meta: ConfirmedTransactionMetaResult,\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getConfirmedTransaction\" message\n */\nconst GetParsedConfirmedTransactionRpcResult = jsonRpcResult(\n  struct.union([\n    'null',\n    struct.pick({\n      slot: 'number',\n      transaction: ParsedConfirmedTransactionResult,\n      meta: ConfirmedTransactionMetaResult,\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"getRecentBlockhash\" message\n */\nconst GetRecentBlockhashAndContextRpcResult = jsonRpcResultAndContext(\n  struct({\n    blockhash: 'string',\n    feeCalculator: struct({\n      lamportsPerSignature: 'number',\n    }),\n  }),\n);\n\n/**\n * Expected JSON RPC response for the \"getFeeCalculatorForBlockhash\" message\n */\nconst GetFeeCalculatorRpcResult = jsonRpcResultAndContext(\n  struct.union([\n    'null',\n    struct({\n      feeCalculator: struct({\n        lamportsPerSignature: 'number',\n      }),\n    }),\n  ]),\n);\n\n/**\n * Expected JSON RPC response for the \"requestAirdrop\" message\n */\nconst RequestAirdropRpcResult = jsonRpcResult('string');\n\n/**\n * Expected JSON RPC response for the \"sendTransaction\" message\n */\nconst SendTransactionRpcResult = jsonRpcResult('string');\n\n/**\n * Information about the latest slot being processed by a node\n *\n * @typedef {Object} SlotInfo\n * @property {number} slot Currently processing slot\n * @property {number} parent Parent of the current slot\n * @property {number} root The root block of the current slot's fork\n */\ntype SlotInfo = {\n  slot: number,\n  parent: number,\n  root: number,\n};\n\n/**\n * Parsed account data\n *\n * @typedef {Object} ParsedAccountData\n * @property {string} program Name of the program that owns this account\n * @property {any} parsed Parsed account data\n * @property {number} space Space used by account data\n */\ntype ParsedAccountData = {\n  program: string,\n  parsed: any,\n  space: number,\n};\n\n/**\n * Information describing an account\n *\n * @typedef {Object} AccountInfo\n * @property {number} lamports Number of lamports assigned to the account\n * @property {PublicKey} owner Identifier of the program that owns the account\n * @property {T} data Optional data assigned to the account\n * @property {boolean} executable `true` if this account's data contains a loaded program\n */\ntype AccountInfo<T> = {\n  executable: boolean,\n  owner: PublicKey,\n  lamports: number,\n  data: T,\n};\n\n/**\n * Account information identified by pubkey\n *\n * @typedef {Object} KeyedAccountInfo\n * @property {PublicKey} accountId\n * @property {AccountInfo<Buffer>} accountInfo\n */\ntype KeyedAccountInfo = {\n  accountId: PublicKey,\n  accountInfo: AccountInfo<Buffer>,\n};\n\n/**\n * Callback function for account change notifications\n */\nexport type AccountChangeCallback = (\n  accountInfo: AccountInfo<Buffer>,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SubscriptionId = 'subscribing' | number;\n\n/**\n * @private\n */\ntype AccountSubscriptionInfo = {\n  publicKey: string, // PublicKey of the account as a base 58 string\n  callback: AccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for program account change notifications\n */\nexport type ProgramAccountChangeCallback = (\n  keyedAccountInfo: KeyedAccountInfo,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype ProgramAccountSubscriptionInfo = {\n  programId: string, // PublicKey of the program as a base 58 string\n  callback: ProgramAccountChangeCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for slot change notifications\n */\nexport type SlotChangeCallback = (slotInfo: SlotInfo) => void;\n\n/**\n * @private\n */\ntype SlotSubscriptionInfo = {\n  callback: SlotChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for signature notifications\n */\nexport type SignatureResultCallback = (\n  signatureResult: SignatureResult,\n  context: Context,\n) => void;\n\n/**\n * @private\n */\ntype SignatureSubscriptionInfo = {\n  signature: TransactionSignature, // TransactionSignature as a base 58 string\n  callback: SignatureResultCallback,\n  commitment: ?Commitment,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Callback function for root change notifications\n */\nexport type RootChangeCallback = (root: number) => void;\n\n/**\n * @private\n */\ntype RootSubscriptionInfo = {\n  callback: RootChangeCallback,\n  subscriptionId: ?SubscriptionId, // null when there's no current server subscription id\n};\n\n/**\n * Signature result\n *\n * @typedef {Object} SignatureResult\n */\nexport type SignatureResult = {|\n  err: TransactionError | null,\n|};\n\n/**\n * Transaction error\n *\n * @typedef {Object} TransactionError\n */\nexport type TransactionError = {};\n\n/**\n * Signature status\n *\n * @typedef {Object} SignatureStatus\n * @property {number} slot when the transaction was processed\n * @property {number | null} confirmations the number of blocks that have been confirmed and voted on in the fork containing `slot` (TODO)\n * @property {TransactionError | null} err error, if any\n */\nexport type SignatureStatus = {\n  slot: number,\n  confirmations: number | null,\n  err: TransactionError | null,\n};\n\n/**\n * A confirmed signature with its status\n *\n * @typedef {Object} ConfirmedSignatureInfo\n * @property {string} signature the transaction signature\n * @property {number} slot when the transaction was processed\n * @property {TransactionError | null} err error, if any\n * @property {string | null} memo memo associated with the transaction, if any\n */\nexport type ConfirmedSignatureInfo = {\n  signature: string,\n  slot: number,\n  err: TransactionError | null,\n  memo: string | null,\n};\n\n/**\n * A connection to a fullnode JSON RPC endpoint\n */\nexport class Connection {\n  _rpcRequest: RpcRequest;\n  _rpcWebSocket: RpcWebSocketClient;\n  _rpcWebSocketConnected: boolean = false;\n\n  _commitment: ?Commitment;\n  _blockhashInfo: {\n    recentBlockhash: Blockhash | null,\n    lastFetch: Date,\n    simulatedSignatures: Array<string>,\n    transactionSignatures: Array<string>,\n  };\n  _disableBlockhashCaching: boolean = false;\n  _accountChangeSubscriptions: {[number]: AccountSubscriptionInfo} = {};\n  _accountChangeSubscriptionCounter: number = 0;\n  _programAccountChangeSubscriptions: {\n    [number]: ProgramAccountSubscriptionInfo,\n  } = {};\n  _programAccountChangeSubscriptionCounter: number = 0;\n  _slotSubscriptions: {\n    [number]: SlotSubscriptionInfo,\n  } = {};\n  _slotSubscriptionCounter: number = 0;\n  _signatureSubscriptions: {\n    [number]: SignatureSubscriptionInfo,\n  } = {};\n  _signatureSubscriptionCounter: number = 0;\n  _rootSubscriptions: {\n    [number]: RootSubscriptionInfo,\n  } = {};\n  _rootSubscriptionCounter: number = 0;\n\n  /**\n   * Establish a JSON RPC connection\n   *\n   * @param endpoint URL to the fullnode JSON RPC endpoint\n   * @param commitment optional default commitment level\n   */\n  constructor(endpoint: string, commitment: ?Commitment) {\n    let url = urlParse(endpoint);\n\n    this._rpcRequest = createRpcRequest(url.href);\n    this._commitment = commitment;\n    this._blockhashInfo = {\n      recentBlockhash: null,\n      lastFetch: new Date(0),\n      transactionSignatures: [],\n      simulatedSignatures: [],\n    };\n\n    url.protocol = url.protocol === 'https:' ? 'wss:' : 'ws:';\n    url.host = '';\n    if (url.port !== null) {\n      url.port = String(Number(url.port) + 1);\n    }\n    this._rpcWebSocket = new RpcWebSocketClient(urlFormat(url), {\n      autoconnect: false,\n      max_reconnects: Infinity,\n    });\n    this._rpcWebSocket.on('open', this._wsOnOpen.bind(this));\n    this._rpcWebSocket.on('error', this._wsOnError.bind(this));\n    this._rpcWebSocket.on('close', this._wsOnClose.bind(this));\n    this._rpcWebSocket.on(\n      'accountNotification',\n      this._wsOnAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'programNotification',\n      this._wsOnProgramAccountNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'slotNotification',\n      this._wsOnSlotNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'signatureNotification',\n      this._wsOnSignatureNotification.bind(this),\n    );\n    this._rpcWebSocket.on(\n      'rootNotification',\n      this._wsOnRootNotification.bind(this),\n    );\n  }\n\n  /**\n   * The default commitment used for requests\n   */\n  get commitment(): ?Commitment {\n    return this._commitment;\n  }\n\n  /**\n   * Fetch the balance for the specified public key, return with context\n   */\n  async getBalanceAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<number>> {\n    const args = this._buildArgs([publicKey.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getBalance', args);\n    const res = GetBalanceAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get balance for ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the balance for the specified public key\n   */\n  async getBalance(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    return await this.getBalanceAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get balance of account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch the estimated production time of a block\n   */\n  async getBlockTime(slot: number): Promise<number | null> {\n    const unsafeRes = await this._rpcRequest('getBlockTime', [slot]);\n    const res = GetBlockTimeRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get block time for slot ' + slot + ': ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the lowest slot that the node has information about in its ledger.\n   * This value may increase over time if the node is configured to purge older ledger data\n   */\n  async getMinimumLedgerSlot(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('minimumLedgerSlot', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get minimum ledger slot: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the slot of the lowest confirmed block that has not been purged from the ledger\n   */\n  async getFirstAvailableBlock(): Promise<number> {\n    const unsafeRes = await this._rpcRequest('getFirstAvailableBlock', []);\n    const res = SlotRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get first available block: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch information about the current supply\n   */\n  async getSupply(\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Supply>> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSupply', args);\n    const res = GetSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value.nonCirculatingAccounts = res.result.value.nonCirculatingAccounts.map(\n      account => new PublicKey(account),\n    );\n    return res.result;\n  }\n\n  /**\n   * Fetch the current supply of a token mint\n   */\n  async getTokenSupply(\n    tokenMintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenMintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenSupply', args);\n    const res = GetTokenSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get token supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current balance of a token account\n   */\n  async getTokenAccountBalance(\n    tokenAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<TokenAmount>> {\n    const args = this._buildArgs([tokenAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenAccountBalance', args);\n    const res = GetTokenAccountBalance(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token account balance: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch all the token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>>}\n   */\n  async getTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'base64');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => {\n        assert(result.account.data[1] === 'base64');\n        return {\n          pubkey: new PublicKey(result.pubkey),\n          account: {\n            executable: result.account.executable,\n            owner: new PublicKey(result.account.owner),\n            lamports: result.account.lamports,\n            data: Buffer.from(result.account.data[0], 'base64'),\n          },\n        };\n      }),\n    };\n  }\n\n  /**\n   * Fetch parsed token accounts owned by the specified account\n   *\n   * @return {Promise<RpcResponseAndContext<Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>>>}\n   */\n  async getParsedTokenAccountsByOwner(\n    ownerAddress: PublicKey,\n    filter: TokenAccountsFilter,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<\n      Array<{pubkey: PublicKey, account: AccountInfo<ParsedAccountData>}>,\n    >,\n  > {\n    let _args = [ownerAddress.toBase58()];\n    if (filter.mint) {\n      _args.push({mint: filter.mint.toBase58()});\n    } else {\n      _args.push({programId: filter.programId.toBase58()});\n    }\n\n    const args = this._buildArgs(_args, commitment, 'jsonParsed');\n    const unsafeRes = await this._rpcRequest('getTokenAccountsByOwner', args);\n    const res = GetParsedTokenAccountsByOwner(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token accounts owned by account ' +\n          ownerAddress.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    const {context, value} = result;\n    assert(typeof result !== 'undefined');\n\n    return {\n      context,\n      value: value.map(result => ({\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: result.account.data,\n        },\n      })),\n    };\n  }\n\n  /**\n   * Fetch the 20 largest accounts with their current balances\n   */\n  async getLargestAccounts(\n    config: ?GetLargestAccountsConfig,\n  ): Promise<RpcResponseAndContext<Array<AccountBalancePair>>> {\n    const arg = {\n      ...config,\n      commitment: (config && config.commitment) || this.commitment,\n    };\n    const args = arg.filter || arg.commitment ? [arg] : [];\n    const unsafeRes = await this._rpcRequest('getLargestAccounts', args);\n    const res = GetLargestAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get largest accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(({address, lamports}) => ({\n      address: new PublicKey(address),\n      lamports,\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch the 20 largest token accounts with their current balances\n   * for a given mint.\n   */\n  async getTokenLargestAccounts(\n    mintAddress: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<Array<TokenAccountBalancePair>>> {\n    const args = this._buildArgs([mintAddress.toBase58()], commitment);\n    const unsafeRes = await this._rpcRequest('getTokenLargestAccounts', args);\n    const res = GetTokenLargestAccountsResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get token largest accounts: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    res.result.value = res.result.value.map(pair => ({\n      ...pair,\n      address: new PublicKey(pair.address),\n    }));\n    return res.result;\n  }\n\n  /**\n   * Fetch all the account info for the specified public key, return with context\n   */\n  async getAccountInfoAndContext(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<AccountInfo<Buffer> | null>> {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'base64',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetAccountInfoAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data} = res.result.value;\n      assert(data[1] === 'base64');\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data: Buffer.from(data[0], 'base64'),\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch parsed account info for the specified public key\n   */\n  async getParsedAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<AccountInfo<Buffer | ParsedAccountData> | null>,\n  > {\n    const args = this._buildArgs(\n      [publicKey.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getAccountInfo', args);\n    const res = GetParsedAccountInfoResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get info about account ' +\n          publicKey.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n\n    let value = null;\n    if (res.result.value) {\n      const {executable, owner, lamports, data: resultData} = res.result.value;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      value = {\n        executable,\n        owner: new PublicKey(owner),\n        lamports,\n        data,\n      };\n    }\n\n    return {\n      context: {\n        slot: res.result.context.slot,\n      },\n      value,\n    };\n  }\n\n  /**\n   * Fetch all the account info for the specified public key\n   */\n  async getAccountInfo(\n    publicKey: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<AccountInfo<Buffer> | null> {\n    return await this.getAccountInfoAndContext(publicKey, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get info about account ' + publicKey.toBase58() + ': ' + e,\n        );\n      });\n  }\n\n  /**\n   * Fetch all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>>}\n   */\n  async getProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer>}>> {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'base64',\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      assert(result.account.data[1] === 'base64');\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data: Buffer.from(result.account.data[0], 'base64'),\n        },\n      };\n    });\n  }\n\n  /**\n   * Fetch and parse all the accounts owned by the specified program id\n   *\n   * @return {Promise<Array<{pubkey: PublicKey, account: AccountInfo<Buffer | ParsedAccountData>}>>}\n   */\n  async getParsedProgramAccounts(\n    programId: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<\n    Array<{\n      pubkey: PublicKey,\n      account: AccountInfo<Buffer | ParsedAccountData>,\n    }>,\n  > {\n    const args = this._buildArgs(\n      [programId.toBase58()],\n      commitment,\n      'jsonParsed',\n    );\n    const unsafeRes = await this._rpcRequest('getProgramAccounts', args);\n    const res = GetParsedProgramAccountsRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'failed to get accounts owned by program ' +\n          programId.toBase58() +\n          ': ' +\n          res.error.message,\n      );\n    }\n\n    const {result} = res;\n    assert(typeof result !== 'undefined');\n\n    return result.map(result => {\n      const resultData = result.account.data;\n\n      let data = resultData;\n      if (!data.program) {\n        assert(data[1] === 'base64');\n        data = Buffer.from(data[0], 'base64');\n      }\n\n      return {\n        pubkey: new PublicKey(result.pubkey),\n        account: {\n          executable: result.account.executable,\n          owner: new PublicKey(result.account.owner),\n          lamports: result.account.lamports,\n          data,\n        },\n      };\n    });\n  }\n\n  /**\n   * Confirm the transaction identified by the specified signature\n   */\n  async confirmTransaction(\n    signature: TransactionSignature,\n    confirmations: ?number,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const start = Date.now();\n    const WAIT_TIMEOUT_MS = 60 * 1000;\n\n    let statusResponse = await this.getSignatureStatus(signature);\n    for (;;) {\n      const status = statusResponse.value;\n      if (status) {\n        // Received a status, if not an error wait for confirmation\n        if (\n          status.err ||\n          status.confirmations === null ||\n          (typeof confirmations === 'number' &&\n            status.confirmations >= confirmations)\n        ) {\n          break;\n        }\n      } else if (Date.now() - start >= WAIT_TIMEOUT_MS) {\n        break;\n      }\n\n      // Sleep for approximately one slot\n      await sleep(MS_PER_SLOT);\n      statusResponse = await this.getSignatureStatus(signature);\n    }\n\n    return statusResponse;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getClusterNodes(): Promise<Array<ContactInfo>> {\n    const unsafeRes = await this._rpcRequest('getClusterNodes', []);\n\n    const res = GetClusterNodes(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get cluster nodes: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Return the list of nodes that are currently participating in the cluster\n   */\n  async getVoteAccounts(commitment: ?Commitment): Promise<VoteAccountStatus> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getVoteAccounts', args);\n    const res = GetVoteAccounts(unsafeRes);\n    //const res = unsafeRes;\n    if (res.error) {\n      throw new Error('failed to get vote accounts: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot that the node is processing\n   */\n  async getSlot(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlot', args);\n    const res = GetSlot(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current slot leader of the cluster\n   */\n  async getSlotLeader(commitment: ?Commitment): Promise<string> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getSlotLeader', args);\n    const res = GetSlotLeader(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get slot leader: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current status of a signature\n   */\n  async getSignatureStatus(\n    signature: TransactionSignature,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<SignatureStatus | null>> {\n    const {context, value} = await this.getSignatureStatuses(\n      [signature],\n      config,\n    );\n    assert(value.length === 1);\n    return {context, value: value[0]};\n  }\n\n  /**\n   * Fetch the current statuses of a batch of signatures\n   */\n  async getSignatureStatuses(\n    signatures: Array<TransactionSignature>,\n    config: ?SignatureStatusConfig,\n  ): Promise<RpcResponseAndContext<Array<SignatureStatus | null>>> {\n    const params = [signatures];\n    if (config) {\n      params.push(config);\n    }\n    const unsafeRes = await this._rpcRequest('getSignatureStatuses', params);\n    const res = GetSignatureStatusesRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get signature status: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the current transaction count of the cluster\n   */\n  async getTransactionCount(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTransactionCount', args);\n    const res = GetTransactionCountRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get transaction count: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the current total currency supply of the cluster in lamports\n   */\n  async getTotalSupply(commitment: ?Commitment): Promise<number> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getTotalSupply', args);\n    const res = GetTotalSupplyRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('faied to get total supply: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch the cluster InflationGovernor parameters\n   */\n  async getInflationGovernor(\n    commitment: ?Commitment,\n  ): Promise<InflationGovernor> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getInflationGovernor', args);\n    const res = GetInflationGovernorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get inflation: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetInflationGovernorResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Info parameters\n   */\n  async getEpochInfo(commitment: ?Commitment): Promise<EpochInfo> {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getEpochInfo', args);\n    const res = GetEpochInfoRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch info: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochInfoResult(res.result);\n  }\n\n  /**\n   * Fetch the Epoch Schedule parameters\n   */\n  async getEpochSchedule(): Promise<EpochSchedule> {\n    const unsafeRes = await this._rpcRequest('getEpochSchedule', []);\n    const res = GetEpochScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get epoch schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return GetEpochScheduleResult(res.result);\n  }\n\n  /**\n   * Fetch the leader schedule for the current epoch\n   * @return {Promise<RpcResponseAndContext<LeaderSchedule>>}\n   */\n  async getLeaderSchedule(): Promise<LeaderSchedule> {\n    const unsafeRes = await this._rpcRequest('getLeaderSchedule', []);\n    const res = GetLeaderScheduleRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get leader schedule: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the minimum balance needed to exempt an account of `dataLength`\n   * size from rent\n   */\n  async getMinimumBalanceForRentExemption(\n    dataLength: number,\n    commitment: ?Commitment,\n  ): Promise<number> {\n    const args = this._buildArgs([dataLength], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getMinimumBalanceForRentExemption',\n      args,\n    );\n    const res = GetMinimumBalanceForRentExemptionRpcResult(unsafeRes);\n    if (res.error) {\n      console.warn('Unable to fetch minimum balance for rent exemption');\n      return 0;\n    }\n    assert(typeof res.result !== 'undefined');\n    return Number(res.result);\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster, return with context\n   * @return {Promise<RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>>}\n   */\n  async getRecentBlockhashAndContext(\n    commitment: ?Commitment,\n  ): Promise<\n    RpcResponseAndContext<{blockhash: Blockhash, feeCalculator: FeeCalculator}>,\n  > {\n    const args = this._buildArgs([], commitment);\n    const unsafeRes = await this._rpcRequest('getRecentBlockhash', args);\n\n    const res = GetRecentBlockhashAndContextRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get recent blockhash: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch the fee calculator for a recent blockhash from the cluster, return with context\n   */\n  async getFeeCalculatorForBlockhash(\n    blockhash: Blockhash,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<FeeCalculator | null>> {\n    const args = this._buildArgs([blockhash], commitment);\n    const unsafeRes = await this._rpcRequest(\n      'getFeeCalculatorForBlockhash',\n      args,\n    );\n\n    const res = GetFeeCalculatorRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get fee calculator: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {context, value} = res.result;\n    return {\n      context,\n      value: value && value.feeCalculator,\n    };\n  }\n\n  /**\n   * Fetch a recent blockhash from the cluster\n   * @return {Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}>}\n   */\n  async getRecentBlockhash(\n    commitment: ?Commitment,\n  ): Promise<{blockhash: Blockhash, feeCalculator: FeeCalculator}> {\n    return await this.getRecentBlockhashAndContext(commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error('failed to get recent blockhash: ' + e);\n      });\n  }\n\n  /**\n   * Fetch the node version\n   */\n  async getVersion(): Promise<Version> {\n    const unsafeRes = await this._rpcRequest('getVersion', []);\n    const res = GetVersionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to get version: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Fetch a list of Transactions and transaction statuses from the cluster\n   * for a confirmed block\n   */\n  async getConfirmedBlock(slot: number): Promise<ConfirmedBlock> {\n    const unsafeRes = await this._rpcRequest('getConfirmedBlock', [slot]);\n    const {result, error} = GetConfirmedBlockRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed block: ' + result.error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (!result) {\n      throw new Error('Confirmed block ' + slot + ' not found');\n    }\n    return {\n      blockhash: new PublicKey(result.blockhash).toString(),\n      previousBlockhash: new PublicKey(result.previousBlockhash).toString(),\n      parentSlot: result.parentSlot,\n      transactions: result.transactions.map(result => {\n        const {message, signatures} = result.transaction;\n        return {\n          transaction: Transaction.populate(new Message(message), signatures),\n          meta: result.meta,\n        };\n      }),\n      rewards: result.rewards || [],\n    };\n  }\n\n  /**\n   * Fetch a transaction details for a confirmed transaction\n   */\n  async getConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n    ]);\n    const {result, error} = GetConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) {\n      return result;\n    }\n\n    const {message, signatures} = result.transaction;\n    return {\n      slot: result.slot,\n      transaction: Transaction.populate(new Message(message), signatures),\n      meta: result.meta,\n    };\n  }\n\n  /**\n   * Fetch parsed transaction details for a confirmed transaction\n   */\n  async getParsedConfirmedTransaction(\n    signature: TransactionSignature,\n  ): Promise<ParsedConfirmedTransaction | null> {\n    const unsafeRes = await this._rpcRequest('getConfirmedTransaction', [\n      signature,\n      'jsonParsed',\n    ]);\n    const {result, error} = GetParsedConfirmedTransactionRpcResult(unsafeRes);\n    if (error) {\n      throw new Error('failed to get confirmed transaction: ' + error.message);\n    }\n    assert(typeof result !== 'undefined');\n    if (result === null) return result;\n\n    const {\n      accountKeys,\n      instructions,\n      recentBlockhash,\n    } = result.transaction.message;\n    return {\n      slot: result.slot,\n      meta: result.meta,\n      transaction: {\n        signatures: result.transaction.signatures,\n        message: {\n          accountKeys: accountKeys.map(accountKey => ({\n            pubkey: new PublicKey(accountKey.pubkey),\n            signer: accountKey.signer,\n            writable: accountKey.writable,\n          })),\n          instructions: instructions.map(ix => {\n            let mapped: any = {programId: new PublicKey(ix.programId)};\n            if ('accounts' in ix) {\n              mapped.accounts = ix.accounts.map(key => new PublicKey(key));\n            }\n\n            return {\n              ...ix,\n              ...mapped,\n            };\n          }),\n          recentBlockhash,\n        },\n      },\n    };\n  }\n\n  /**\n   * Fetch a list of all the confirmed signatures for transactions involving an address\n   * within a specified slot range. Max range allowed is 10,000 slots.\n   *\n   * @param address queried address\n   * @param startSlot start slot, inclusive\n   * @param endSlot end slot, inclusive\n   */\n  async getConfirmedSignaturesForAddress(\n    address: PublicKey,\n    startSlot: number,\n    endSlot: number,\n  ): Promise<Array<TransactionSignature>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress',\n      [address.toBase58(), startSlot, endSlot],\n    );\n    const result = GetConfirmedSignaturesForAddressRpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Returns confirmed signatures for transactions involving an\n   * address backwards in time from the provided signature or most recent confirmed block\n   *\n   *\n   * @param address queried address\n   * @param options\n   */\n  async getConfirmedSignaturesForAddress2(\n    address: PublicKey,\n    options: ?ConfirmedSignaturesForAddress2Options,\n  ): Promise<Array<ConfirmedSignatureInfo>> {\n    const unsafeRes = await this._rpcRequest(\n      'getConfirmedSignaturesForAddress2',\n      [address.toBase58(), options],\n    );\n    const result = GetConfirmedSignaturesForAddress2RpcResult(unsafeRes);\n    if (result.error) {\n      throw new Error(\n        'failed to get confirmed signatures for address: ' +\n          result.error.message,\n      );\n    }\n    assert(typeof result.result !== 'undefined');\n    return result.result;\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster, return with context\n   */\n  async getNonceAndContext(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<RpcResponseAndContext<NonceAccount | null>> {\n    const {context, value: accountInfo} = await this.getAccountInfoAndContext(\n      nonceAccount,\n      commitment,\n    );\n\n    let value = null;\n    if (accountInfo !== null) {\n      value = NonceAccount.fromAccountData(accountInfo.data);\n    }\n\n    return {\n      context,\n      value,\n    };\n  }\n\n  /**\n   * Fetch the contents of a Nonce account from the cluster\n   */\n  async getNonce(\n    nonceAccount: PublicKey,\n    commitment: ?Commitment,\n  ): Promise<NonceAccount | null> {\n    return await this.getNonceAndContext(nonceAccount, commitment)\n      .then(x => x.value)\n      .catch(e => {\n        throw new Error(\n          'failed to get nonce for account ' +\n            nonceAccount.toBase58() +\n            ': ' +\n            e,\n        );\n      });\n  }\n\n  /**\n   * Request an allocation of lamports to the specified account\n   */\n  async requestAirdrop(\n    to: PublicKey,\n    amount: number,\n  ): Promise<TransactionSignature> {\n    const unsafeRes = await this._rpcRequest('requestAirdrop', [\n      to.toBase58(),\n      amount,\n    ]);\n    const res = RequestAirdropRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error(\n        'airdrop to ' + to.toBase58() + ' failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  async _recentBlockhash(disableCache: boolean): Promise<Blockhash> {\n    if (!disableCache) {\n      // Attempt to use a recent blockhash for up to 30 seconds\n      const expired =\n        Date.now() - this._blockhashInfo.lastFetch >=\n        BLOCKHASH_CACHE_TIMEOUT_MS;\n      if (this._blockhashInfo.recentBlockhash !== null && !expired) {\n        return this._blockhashInfo.recentBlockhash;\n      }\n    }\n\n    return await this._pollNewBlockhash();\n  }\n\n  async _pollNewBlockhash(): Promise<Blockhash> {\n    const startTime = Date.now();\n    for (let i = 0; i < 50; i++) {\n      const {blockhash} = await this.getRecentBlockhash('max');\n\n      if (this._blockhashInfo.recentBlockhash != blockhash) {\n        this._blockhashInfo = {\n          recentBlockhash: blockhash,\n          lastFetch: new Date(),\n          transactionSignatures: [],\n          simulatedSignatures: [],\n        };\n        return blockhash;\n      }\n\n      // Sleep for approximately half a slot\n      await sleep(MS_PER_SLOT / 2);\n    }\n\n    throw new Error(\n      `Unable to obtain a new blockhash after ${Date.now() - startTime}ms`,\n    );\n  }\n\n  /**\n   * Simulate a transaction\n   */\n  async simulateTransaction(\n    transaction: Transaction,\n    signers?: Array<Account>,\n  ): Promise<RpcResponseAndContext<SimulatedTransactionResponse>> {\n    if (transaction.nonceInfo && signers) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n\n        if (!signers) break;\n\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (\n          !this._blockhashInfo.simulatedSignatures.includes(signature) &&\n          !this._blockhashInfo.transactionSignatures.includes(signature)\n        ) {\n          this._blockhashInfo.simulatedSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const signData = transaction.serializeMessage();\n    const wireTransaction = transaction._serialize(signData);\n    const encodedTransaction = bs58.encode(wireTransaction);\n    const args = [encodedTransaction];\n\n    if (signers) {\n      args.push({sigVerify: true});\n    }\n\n    const unsafeRes = await this._rpcRequest('simulateTransaction', args);\n    const res = SimulatedTransactionResponseValidator(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to simulate transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * Sign and send a transaction\n   */\n  async sendTransaction(\n    transaction: Transaction,\n    signers: Array<Account>,\n    options?: SendOptions,\n  ): Promise<TransactionSignature> {\n    if (transaction.nonceInfo) {\n      transaction.sign(...signers);\n    } else {\n      let disableCache = this._disableBlockhashCaching;\n      for (;;) {\n        transaction.recentBlockhash = await this._recentBlockhash(disableCache);\n        transaction.sign(...signers);\n        if (!transaction.signature) {\n          throw new Error('!signature'); // should never happen\n        }\n\n        // If the signature of this transaction has not been seen before with the\n        // current recentBlockhash, all done.\n        const signature = transaction.signature.toString('base64');\n        if (!this._blockhashInfo.transactionSignatures.includes(signature)) {\n          this._blockhashInfo.transactionSignatures.push(signature);\n          break;\n        } else {\n          disableCache = true;\n        }\n      }\n    }\n\n    const wireTransaction = transaction.serialize();\n    return await this.sendRawTransaction(wireTransaction, options);\n  }\n\n  /**\n   * @private\n   */\n  async validatorExit(): Promise<boolean> {\n    const unsafeRes = await this._rpcRequest('validatorExit', []);\n    const res = jsonRpcResult('boolean')(unsafeRes);\n    if (res.error) {\n      throw new Error('validator exit failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    return res.result;\n  }\n\n  /**\n   * Send a transaction that has already been signed and serialized into the\n   * wire format\n   */\n  async sendRawTransaction(\n    rawTransaction: Buffer | Uint8Array | Array<number>,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const encodedTransaction = bs58.encode(toBuffer(rawTransaction));\n    const result = await this.sendEncodedTransaction(\n      encodedTransaction,\n      options,\n    );\n    return result;\n  }\n\n  /**\n   * Send a transaction that has already been signed, serialized into the\n   * wire format, and encoded as a base58 string\n   */\n  async sendEncodedTransaction(\n    encodedTransaction: string,\n    options: ?SendOptions,\n  ): Promise<TransactionSignature> {\n    const args = [encodedTransaction];\n    const skipPreflight = options && options.skipPreflight;\n    if (skipPreflight) args.push({skipPreflight});\n    const unsafeRes = await this._rpcRequest('sendTransaction', args);\n    const res = SendTransactionRpcResult(unsafeRes);\n    if (res.error) {\n      throw new Error('failed to send transaction: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    assert(res.result);\n    return res.result;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnOpen() {\n    this._rpcWebSocketConnected = true;\n    this._updateSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  _wsOnError(err: Error) {\n    console.error('ws error:', err.message);\n  }\n\n  /**\n   * @private\n   */\n  _wsOnClose() {\n    this._rpcWebSocketConnected = false;\n    this._resetSubscriptions();\n  }\n\n  /**\n   * @private\n   */\n  async _subscribe<SubInfo: {subscriptionId: ?SubscriptionId}, RpcArgs>(\n    sub: SubInfo,\n    rpcMethod: string,\n    rpcArgs: RpcArgs,\n  ) {\n    if (sub.subscriptionId == null) {\n      sub.subscriptionId = 'subscribing';\n      try {\n        const id = await this._rpcWebSocket.call(rpcMethod, rpcArgs);\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = id;\n        }\n      } catch (err) {\n        if (sub.subscriptionId === 'subscribing') {\n          // eslint-disable-next-line require-atomic-updates\n          sub.subscriptionId = null;\n        }\n        console.error(`${rpcMethod} error for argument`, rpcArgs, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  async _unsubscribe<SubInfo: {subscriptionId: ?SubscriptionId}>(\n    sub: SubInfo,\n    rpcMethod: string,\n  ) {\n    const subscriptionId = sub.subscriptionId;\n    if (subscriptionId != null && typeof subscriptionId != 'string') {\n      const unsubscribeId: number = subscriptionId;\n      try {\n        await this._rpcWebSocket.call(rpcMethod, [unsubscribeId]);\n      } catch (err) {\n        console.error(`${rpcMethod} error:`, err.message);\n      }\n    }\n  }\n\n  /**\n   * @private\n   */\n  _resetSubscriptions() {\n    (Object.values(this._accountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._programAccountChangeSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._signatureSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._slotSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n    (Object.values(this._rootSubscriptions): any).forEach(\n      s => (s.subscriptionId = null),\n    );\n  }\n\n  /**\n   * @private\n   */\n  _updateSubscriptions() {\n    const accountKeys = Object.keys(this._accountChangeSubscriptions).map(\n      Number,\n    );\n    const programKeys = Object.keys(\n      this._programAccountChangeSubscriptions,\n    ).map(Number);\n    const slotKeys = Object.keys(this._slotSubscriptions).map(Number);\n    const signatureKeys = Object.keys(this._signatureSubscriptions).map(Number);\n    const rootKeys = Object.keys(this._rootSubscriptions).map(Number);\n    if (\n      accountKeys.length === 0 &&\n      programKeys.length === 0 &&\n      slotKeys.length === 0 &&\n      signatureKeys.length === 0 &&\n      rootKeys.length === 0\n    ) {\n      this._rpcWebSocket.close();\n      return;\n    }\n\n    if (!this._rpcWebSocketConnected) {\n      this._resetSubscriptions();\n      this._rpcWebSocket.connect();\n      return;\n    }\n\n    for (let id of accountKeys) {\n      const sub = this._accountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'accountSubscribe',\n        this._buildArgs([sub.publicKey], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of programKeys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      this._subscribe(\n        sub,\n        'programSubscribe',\n        this._buildArgs([sub.programId], sub.commitment, 'base64'),\n      );\n    }\n\n    for (let id of slotKeys) {\n      const sub = this._slotSubscriptions[id];\n      this._subscribe(sub, 'slotSubscribe', []);\n    }\n\n    for (let id of signatureKeys) {\n      const sub = this._signatureSubscriptions[id];\n      this._subscribe(\n        sub,\n        'signatureSubscribe',\n        this._buildArgs([sub.signature], sub.commitment),\n      );\n    }\n\n    for (let id of rootKeys) {\n      const sub = this._rootSubscriptions[id];\n      this._subscribe(sub, 'rootSubscribe', []);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnAccountNotification(notification: Object) {\n    const res = AccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error('account notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._accountChangeSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._accountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.data[1] === 'base64');\n        sub.callback(\n          {\n            executable: value.executable,\n            owner: new PublicKey(value.owner),\n            lamports: value.lamports,\n            data: Buffer.from(value.data[0], 'base64'),\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever the specified account changes\n   *\n   * @param publicKey Public key of the account to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onAccountChange(\n    publicKey: PublicKey,\n    callback: AccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._accountChangeSubscriptionCounter;\n    this._accountChangeSubscriptions[id] = {\n      publicKey: publicKey.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeAccountChangeListener(id: number): Promise<void> {\n    if (this._accountChangeSubscriptions[id]) {\n      const subInfo = this._accountChangeSubscriptions[id];\n      delete this._accountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'accountUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnProgramAccountNotification(notification: Object) {\n    const res = ProgramAccountNotificationResult(notification);\n    if (res.error) {\n      throw new Error(\n        'program account notification failed: ' + res.error.message,\n      );\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._programAccountChangeSubscriptions).map(\n      Number,\n    );\n    for (let id of keys) {\n      const sub = this._programAccountChangeSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        const {result} = res;\n        const {value, context} = result;\n\n        assert(value.account.data[1] === 'base64');\n        sub.callback(\n          {\n            accountId: value.pubkey,\n            accountInfo: {\n              executable: value.account.executable,\n              owner: new PublicKey(value.account.owner),\n              lamports: value.account.lamports,\n              data: Buffer.from(value.account.data[0], 'base64'),\n            },\n          },\n          context,\n        );\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked whenever accounts owned by the\n   * specified program change\n   *\n   * @param programId Public key of the program to monitor\n   * @param callback Function to invoke whenever the account is changed\n   * @param commitment Specify the commitment level account changes must reach before notification\n   * @return subscription id\n   */\n  onProgramAccountChange(\n    programId: PublicKey,\n    callback: ProgramAccountChangeCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._programAccountChangeSubscriptionCounter;\n    this._programAccountChangeSubscriptions[id] = {\n      programId: programId.toBase58(),\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister an account notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeProgramAccountChangeListener(id: number): Promise<void> {\n    if (this._programAccountChangeSubscriptions[id]) {\n      const subInfo = this._programAccountChangeSubscriptions[id];\n      delete this._programAccountChangeSubscriptions[id];\n      await this._unsubscribe(subInfo, 'programUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown program account change id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSlotNotification(notification: Object) {\n    const res = SlotNotificationResult(notification);\n    if (res.error) {\n      throw new Error('slot notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const {parent, slot, root} = res.result;\n    const keys = Object.keys(this._slotSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._slotSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback({\n          parent,\n          slot,\n          root,\n        });\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon slot changes\n   *\n   * @param callback Function to invoke whenever the slot changes\n   * @return subscription id\n   */\n  onSlotChange(callback: SlotChangeCallback): number {\n    const id = ++this._slotSubscriptionCounter;\n    this._slotSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a slot notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSlotChangeListener(id: number): Promise<void> {\n    if (this._slotSubscriptions[id]) {\n      const subInfo = this._slotSubscriptions[id];\n      delete this._slotSubscriptions[id];\n      await this._unsubscribe(subInfo, 'slotUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown slot change id: ${id}`);\n    }\n  }\n\n  _buildArgs(\n    args: Array<any>,\n    override: ?Commitment,\n    encoding?: 'jsonParsed' | 'base64',\n  ): Array<any> {\n    const commitment = override || this._commitment;\n    if (commitment || encoding) {\n      let options: any = {};\n      if (encoding) {\n        options.encoding = encoding;\n      }\n      if (commitment) {\n        options.commitment = commitment;\n      }\n      args.push(options);\n    }\n    return args;\n  }\n\n  /**\n   * @private\n   */\n  _wsOnSignatureNotification(notification: Object) {\n    const res = SignatureNotificationResult(notification);\n    if (res.error) {\n      throw new Error('signature notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const keys = Object.keys(this._signatureSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._signatureSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        // Signatures subscriptions are auto-removed by the RPC service so\n        // no need to explicitly send an unsubscribe message\n        delete this._signatureSubscriptions[id];\n        this._updateSubscriptions();\n        sub.callback(res.result.value, res.result.context);\n        return;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon signature updates\n   *\n   * @param signature Transaction signature string in base 58\n   * @param callback Function to invoke on signature notifications\n   * @param commitment Specify the commitment level signature must reach before notification\n   * @return subscription id\n   */\n  onSignature(\n    signature: TransactionSignature,\n    callback: SignatureResultCallback,\n    commitment: ?Commitment,\n  ): number {\n    const id = ++this._signatureSubscriptionCounter;\n    this._signatureSubscriptions[id] = {\n      signature,\n      callback,\n      commitment,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a signature notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeSignatureListener(id: number): Promise<void> {\n    if (this._signatureSubscriptions[id]) {\n      const subInfo = this._signatureSubscriptions[id];\n      delete this._signatureSubscriptions[id];\n      await this._unsubscribe(subInfo, 'signatureUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown signature result id: ${id}`);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _wsOnRootNotification(notification: Object) {\n    const res = RootNotificationResult(notification);\n    if (res.error) {\n      throw new Error('root notification failed: ' + res.error.message);\n    }\n    assert(typeof res.result !== 'undefined');\n    const root = res.result;\n    const keys = Object.keys(this._rootSubscriptions).map(Number);\n    for (let id of keys) {\n      const sub = this._rootSubscriptions[id];\n      if (sub.subscriptionId === res.subscription) {\n        sub.callback(root);\n        return true;\n      }\n    }\n  }\n\n  /**\n   * Register a callback to be invoked upon root changes\n   *\n   * @param callback Function to invoke whenever the root changes\n   * @return subscription id\n   */\n  onRootChange(callback: RootChangeCallback): number {\n    const id = ++this._rootSubscriptionCounter;\n    this._rootSubscriptions[id] = {\n      callback,\n      subscriptionId: null,\n    };\n    this._updateSubscriptions();\n    return id;\n  }\n\n  /**\n   * Deregister a root notification callback\n   *\n   * @param id subscription id to deregister\n   */\n  async removeRootChangeListener(id: number): Promise<void> {\n    if (this._rootSubscriptions[id]) {\n      const subInfo = this._rootSubscriptions[id];\n      delete this._rootSubscriptions[id];\n      await this._unsubscribe(subInfo, 'rootUnsubscribe');\n      this._updateSubscriptions();\n    } else {\n      throw new Error(`Unknown root change id: ${id}`);\n    }\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport {Transaction} from '../transaction';\nimport type {Account} from '../account';\nimport type {ConfirmOptions} from '../connection';\nimport type {TransactionSignature} from '../transaction';\n\n/**\n * Sign, send and confirm a transaction.\n *\n * If `confirmations` count is not specified, wait for transaction to be finalized.\n *\n * @param {Connection} connection\n * @param {Transaction} transaction\n * @param {Array<Account>} signers\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmTransaction(\n  connection: Connection,\n  transaction: Transaction,\n  signers: Array<Account>,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const start = Date.now();\n  const signature = await connection.sendTransaction(\n    transaction,\n    signers,\n    options,\n  );\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.confirmations,\n    )\n  ).value;\n\n  if (status) {\n    if (status.err) {\n      throw new Error(\n        `Transaction ${signature} failed (${JSON.stringify(status)})`,\n      );\n    }\n    return signature;\n  }\n\n  const duration = (Date.now() - start) / 1000;\n  throw new Error(\n    `Transaction was not confirmed in ${duration.toFixed(\n      2,\n    )} seconds (${JSON.stringify(status)})`,\n  );\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\n\n/**\n * @typedef {Object} InstructionType\n * @property (index} The Instruction index (from solana upstream program)\n * @property (BufferLayout} The BufferLayout to use to build data\n */\nexport type InstructionType = {|\n  index: number,\n  layout: typeof BufferLayout,\n|};\n\n/**\n * Populate a buffer of instruction data using an InstructionType\n */\nexport function encodeData(type: InstructionType, fields: Object): Buffer {\n  const allocLength =\n    type.layout.span >= 0 ? type.layout.span : Layout.getAlloc(type, fields);\n  const data = Buffer.alloc(allocLength);\n  const layoutFields = Object.assign({instruction: type.index}, fields);\n  type.layout.encode(layoutFields, data);\n  return data;\n}\n\n/**\n * Decode instruction data buffer using an InstructionType\n */\nexport function decodeData(type: InstructionType, buffer: Buffer): Object {\n  let data;\n  try {\n    data = type.layout.decode(buffer);\n  } catch (err) {\n    throw new Error('invalid instruction; ' + err);\n  }\n\n  if (data.instruction !== type.index) {\n    throw new Error(\n      `invalid instruction; instruction index mismatch ${data.instruction} != ${type.index}`,\n    );\n  }\n\n  return data;\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {NONCE_ACCOUNT_LENGTH} from './nonce-account';\nimport {PublicKey} from './publickey';\nimport {SYSVAR_RECENT_BLOCKHASHES_PUBKEY, SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\n/**\n * Create account system transaction params\n * @typedef {Object} CreateAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Transfer system transaction params\n * @typedef {Object} TransferParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type TransferParams = {|\n  fromPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Assign system transaction params\n * @typedef {Object} AssignParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} programId\n */\nexport type AssignParams = {|\n  accountPubkey: PublicKey,\n  programId: PublicKey,\n|};\n\n/**\n * Create account with seed system transaction params\n * @typedef {Object} CreateAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} newAccountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type CreateAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  newAccountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  lamports: number,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Create nonce account system transaction params\n * @typedef {Object} CreateNonceAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {number} lamports\n */\nexport type CreateNonceAccountParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Create nonce account with seed system transaction params\n * @typedef {Object} CreateNonceAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} lamports\n */\nexport type CreateNonceAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  lamports: number,\n  basePubkey: PublicKey,\n  seed: string,\n|};\n\n/**\n * Initialize nonce account system instruction params\n * @typedef {Object} InitializeNonceParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} programId\n */\nexport type InitializeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Advance nonce account system instruction params\n * @typedef {Object} AdvanceNonceParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} programId\n */\nexport type AdvanceNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Withdraw nonce account system transaction params\n * @typedef {Object} WithdrawNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Authorize nonce account system transaction params\n * @typedef {Object} AuthorizeNonceParams\n * @property {PublicKey} noncePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n */\nexport type AuthorizeNonceParams = {|\n  noncePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n|};\n\n/**\n * Allocate account system transaction params\n * @typedef {Object} AllocateParams\n * @property {PublicKey} accountPubkey\n * @property {number} space\n */\nexport type AllocateParams = {|\n  accountPubkey: PublicKey,\n  space: number,\n|};\n\n/**\n * Allocate account with seed system transaction params\n * @typedef {Object} AllocateWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {number} space\n * @property {PublicKey} programId\n */\nexport type AllocateWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  space: number,\n  programId: PublicKey,\n|};\n\n/**\n * Assign account with seed system transaction params\n * @typedef {Object} AssignWithSeedParams\n * @property {PublicKey} accountPubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {PublicKey} programId\n */\nexport type AssignWithSeedParams = {|\n  accountPubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  programId: PublicKey,\n|};\n\n/**\n * System Instruction class\n */\nexport class SystemInstruction {\n  /**\n   * Decode a system instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): SystemInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(SYSTEM_INSTRUCTION_LAYOUTS)) {\n      if (SYSTEM_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a SystemInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a create account system instruction and retrieve the instruction params.\n   */\n  static decodeCreateAccount(\n    instruction: TransactionInstruction,\n  ): CreateAccountParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Create,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a transfer system instruction and retrieve the instruction params.\n   */\n  static decodeTransfer(instruction: TransactionInstruction): TransferParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Transfer,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode an allocate system instruction and retrieve the instruction params.\n   */\n  static decodeAllocate(instruction: TransactionInstruction): AllocateParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {space} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Allocate,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      space,\n    };\n  }\n\n  /**\n   * Decode an allocate with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAllocateWithSeed(\n    instruction: TransactionInstruction,\n  ): AllocateWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign system instruction and retrieve the instruction params.\n   */\n  static decodeAssign(instruction: TransactionInstruction): AssignParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.Assign,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode an assign with seed system instruction and retrieve the instruction params.\n   */\n  static decodeAssignWithSeed(\n    instruction: TransactionInstruction,\n  ): AssignWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 1);\n\n    const {base, seed, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed,\n      instruction.data,\n    );\n\n    return {\n      accountPubkey: instruction.keys[0].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a create account with seed system instruction and retrieve the instruction params.\n   */\n  static decodeCreateWithSeed(\n    instruction: TransactionInstruction,\n  ): CreateAccountWithSeedParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {base, seed, lamports, space, programId} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,\n      instruction.data,\n    );\n\n    return {\n      fromPubkey: instruction.keys[0].pubkey,\n      newAccountPubkey: instruction.keys[1].pubkey,\n      basePubkey: new PublicKey(base),\n      seed,\n      lamports,\n      space,\n      programId: new PublicKey(programId),\n    };\n  }\n\n  /**\n   * Decode a nonce initialize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * Decode a nonce advance system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAdvance(\n    instruction: TransactionInstruction,\n  ): AdvanceNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n\n    decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * Decode a nonce withdraw system instruction and retrieve the instruction params.\n   */\n  static decodeNonceWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n\n    const {lamports} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a nonce authorize system instruction and retrieve the instruction params.\n   */\n  static decodeNonceAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeNonceParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized} = decodeData(\n      SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,\n      instruction.data,\n    );\n\n    return {\n      noncePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[1].pubkey,\n      newAuthorizedPubkey: new PublicKey(authorized),\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(SystemProgram.programId)) {\n      throw new Error('invalid instruction; programId is not SystemProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid SystemInstructionType's\n * @typedef {'Create' | 'Assign' | 'Transfer' | 'CreateWithSeed'\n | 'AdvanceNonceAccount' | 'WithdrawNonceAccount' | 'InitializeNonceAccount'\n | 'AuthorizeNonceAccount'} SystemInstructionType\n */\nexport type SystemInstructionType = $Keys<typeof SYSTEM_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid system InstructionType's\n */\nexport const SYSTEM_INSTRUCTION_LAYOUTS = Object.freeze({\n  Create: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Assign: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  Transfer: {\n    index: 2,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  CreateWithSeed: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('lamports'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AdvanceNonceAccount: {\n    index: 4,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  WithdrawNonceAccount: {\n    index: 5,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  InitializeNonceAccount: {\n    index: 6,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  AuthorizeNonceAccount: {\n    index: 7,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('authorized'),\n    ]),\n  },\n  Allocate: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('space'),\n    ]),\n  },\n  AllocateWithSeed: {\n    index: 9,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      BufferLayout.ns64('space'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n  AssignWithSeed: {\n    index: 10,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('base'),\n      Layout.rustString('seed'),\n      Layout.publicKey('programId'),\n    ]),\n  },\n});\n\n/**\n * Factory class for transactions to interact with the System program\n */\nexport class SystemProgram {\n  /**\n   * Public key that identifies the System program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('11111111111111111111111111111111');\n  }\n\n  /**\n   * Generate a Transaction that creates a new account\n   */\n  static createAccount(params: CreateAccountParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Create;\n    const data = encodeData(type, {\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: true, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that transfers lamports from one account to another\n   */\n  static transfer(params: TransferParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.Transfer;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that assigns an account to a program\n   */\n  static assign(params: AssignParams | AssignWithSeedParams): Transaction {\n    let data;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        programId: params.programId.toBuffer(),\n      });\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Assign;\n      data = encodeData(type, {programId: params.programId.toBuffer()});\n    }\n\n    return new Transaction().add({\n      keys: [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that creates a new account at\n   *   an address generated with `from`, a seed, and programId\n   */\n  static createAccountWithSeed(\n    params: CreateAccountWithSeedParams,\n  ): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed;\n    const data = encodeData(type, {\n      base: params.basePubkey.toBuffer(),\n      seed: params.seed,\n      lamports: params.lamports,\n      space: params.space,\n      programId: params.programId.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.fromPubkey, isSigner: true, isWritable: true},\n        {pubkey: params.newAccountPubkey, isSigner: false, isWritable: true},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that creates a new Nonce account\n   */\n  static createNonceAccount(\n    params: CreateNonceAccountParams | CreateNonceAccountWithSeedParams,\n  ): Transaction {\n    let transaction;\n    if (params.basePubkey && params.seed) {\n      transaction = SystemProgram.createAccountWithSeed({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        basePubkey: params.basePubkey,\n        seed: params.seed,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId,\n      });\n    } else {\n      transaction = SystemProgram.createAccount({\n        fromPubkey: params.fromPubkey,\n        newAccountPubkey: params.noncePubkey,\n        lamports: params.lamports,\n        space: NONCE_ACCOUNT_LENGTH,\n        programId: this.programId,\n      });\n    }\n\n    const initParams = {\n      noncePubkey: params.noncePubkey,\n      authorizedPubkey: params.authorizedPubkey,\n    };\n\n    transaction.add(this.nonceInitialize(initParams));\n    return transaction;\n  }\n\n  /**\n   * Generate an instruction to initialize a Nonce account\n   */\n  static nonceInitialize(\n    params: InitializeNonceParams,\n  ): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.authorizedPubkey.toBuffer(),\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate an instruction to advance the nonce in a Nonce account\n   */\n  static nonceAdvance(params: AdvanceNonceParams): TransactionInstruction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount;\n    const data = encodeData(type);\n    const instructionData = {\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that withdraws lamports from a Nonce account\n   */\n  static nonceWithdraw(params: WithdrawNonceParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount;\n    const data = encodeData(type, {lamports: params.lamports});\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.toPubkey, isSigner: false, isWritable: true},\n        {\n          pubkey: SYSVAR_RECENT_BLOCKHASHES_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {\n          pubkey: SYSVAR_RENT_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as the authority\n   * on a Nonce account.\n   */\n  static nonceAuthorize(params: AuthorizeNonceParams): Transaction {\n    const type = SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount;\n    const data = encodeData(type, {\n      authorized: params.newAuthorizedPubkey.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: params.noncePubkey, isSigner: false, isWritable: true},\n        {pubkey: params.authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that allocates space in an account without funding\n   */\n  static allocate(\n    params: AllocateParams | AllocateWithSeedParams,\n  ): Transaction {\n    let data;\n    if (params.basePubkey) {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;\n      data = encodeData(type, {\n        base: params.basePubkey.toBuffer(),\n        seed: params.seed,\n        space: params.space,\n        programId: params.programId.toBuffer(),\n      });\n    } else {\n      const type = SYSTEM_INSTRUCTION_LAYOUTS.Allocate;\n      data = encodeData(type, {\n        space: params.space,\n      });\n    }\n\n    return new Transaction().add({\n      keys: [{pubkey: params.accountPubkey, isSigner: true, isWritable: true}],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {NUM_TICKS_PER_SECOND} from './timing';\nimport {Transaction, PACKET_DATA_SIZE} from './transaction';\nimport {SYSVAR_RENT_PUBKEY} from './sysvar';\nimport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nimport {sleep} from './util/sleep';\nimport type {Connection} from './connection';\nimport {SystemProgram} from './system-program';\n\n/**\n * Program loader interface\n */\nexport class Loader {\n  /**\n   * Amount of program data placed in each load Transaction\n   */\n  static get chunkSize(): number {\n    // Keep program chunks under PACKET_DATA_SIZE, leaving enough room for the\n    // rest of the Transaction fields\n    //\n    // TODO: replace 300 with a proper constant for the size of the other\n    // Transaction fields\n    return PACKET_DATA_SIZE - 300;\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Math.ceil(dataLength / Loader.chunkSize);\n  }\n\n  /**\n   * Loads a generic program\n   *\n   * @param connection The connection to use\n   * @param payer System account that pays to load the program\n   * @param program Account to load the program into\n   * @param programId Public key that identifies the loader\n   * @param data Program octets\n   */\n  static async load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    programId: PublicKey,\n    data: Buffer | Uint8Array | Array<number>,\n  ): Promise<void> {\n    {\n      const balanceNeeded = await connection.getMinimumBalanceForRentExemption(\n        data.length,\n      );\n      const transaction = SystemProgram.createAccount({\n        fromPubkey: payer.publicKey,\n        newAccountPubkey: program.publicKey,\n        lamports: balanceNeeded > 0 ? balanceNeeded : 1,\n        space: data.length,\n        programId,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          confirmations: 1,\n          skipPreflight: true,\n        },\n      );\n    }\n\n    const dataLayout = BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.u32('offset'),\n      BufferLayout.u32('bytesLength'),\n      BufferLayout.u32('bytesLengthPadding'),\n      BufferLayout.seq(\n        BufferLayout.u8('byte'),\n        BufferLayout.offset(BufferLayout.u32(), -8),\n        'bytes',\n      ),\n    ]);\n\n    const chunkSize = Loader.chunkSize;\n    let offset = 0;\n    let array = data;\n    let transactions = [];\n    while (array.length > 0) {\n      const bytes = array.slice(0, chunkSize);\n      const data = Buffer.alloc(chunkSize + 16);\n      dataLayout.encode(\n        {\n          instruction: 0, // Load instruction\n          offset,\n          bytes,\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [{pubkey: program.publicKey, isSigner: true, isWritable: true}],\n        programId,\n        data,\n      });\n      transactions.push(\n        sendAndConfirmTransaction(connection, transaction, [payer, program], {\n          confirmations: 1,\n          skipPreflight: true,\n        }),\n      );\n\n      // Delay ~1 tick between write transactions in an attempt to reduce AccountInUse errors\n      // since all the write transactions modify the same program account\n      await sleep(1000 / NUM_TICKS_PER_SECOND);\n\n      // Run up to 8 Loads in parallel to prevent too many parallel transactions from\n      // getting rejected with AccountInUse.\n      //\n      // TODO: 8 was selected empirically and should probably be revisited\n      if (transactions.length === 8) {\n        await Promise.all(transactions);\n        transactions = [];\n      }\n\n      offset += chunkSize;\n      array = array.slice(chunkSize);\n    }\n    await Promise.all(transactions);\n\n    // Finalize the account loaded with program data for execution\n    {\n      const dataLayout = BufferLayout.struct([BufferLayout.u32('instruction')]);\n\n      const data = Buffer.alloc(dataLayout.span);\n      dataLayout.encode(\n        {\n          instruction: 1, // Finalize instruction\n        },\n        data,\n      );\n\n      const transaction = new Transaction().add({\n        keys: [\n          {pubkey: program.publicKey, isSigner: true, isWritable: true},\n          {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n        ],\n        programId,\n        data,\n      });\n      await sendAndConfirmTransaction(\n        connection,\n        transaction,\n        [payer, program],\n        {\n          confirmations: 1,\n          skipPreflight: true,\n        },\n      );\n    }\n  }\n}\n","// @flow\n\nimport {Account} from './account';\nimport {PublicKey} from './publickey';\nimport {Loader} from './loader';\nimport type {Connection} from './connection';\n\n/**\n * Factory class for transactions to interact with a program loader\n */\nexport class BpfLoader {\n  /**\n   * Public key that identifies the BpfLoader\n   */\n  static programId(version: number = 2): PublicKey {\n    if (version === 1) {\n      return new PublicKey('BPFLoader1111111111111111111111111111111111');\n    } else {\n      return new PublicKey('BPFLoader2111111111111111111111111111111111');\n    }\n  }\n\n  /**\n   * Minimum number of signatures required to load a program not including\n   * retries\n   *\n   * Can be used to calculate transaction fees\n   */\n  static getMinNumSignatures(dataLength: number): number {\n    return Loader.getMinNumSignatures(dataLength);\n  }\n\n  /**\n   * Load a BPF program\n   *\n   * @param connection The connection to use\n   * @param payer Account that will pay program loading fees\n   * @param program Account to load the program into\n   * @param elf The entire ELF containing the BPF program\n   * @param version The version of the BPF loader to use\n   */\n  static load(\n    connection: Connection,\n    payer: Account,\n    program: Account,\n    elf: Buffer | Uint8Array | Array<number>,\n    version: number = 2,\n  ): Promise<void> {\n    return Loader.load(\n      connection,\n      payer,\n      program,\n      BpfLoader.programId(version),\n      elf,\n    );\n  }\n}\n","// @flow\n\nimport * as BufferLayout from 'buffer-layout';\n\nimport {encodeData, decodeData} from './instruction';\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {SystemProgram} from './system-program';\nimport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nimport {Transaction, TransactionInstruction} from './transaction';\n\nexport const STAKE_CONFIG_ID = new PublicKey(\n  'StakeConfig11111111111111111111111111111111',\n);\n\nexport class Authorized {\n  staker: PublicKey;\n  withdrawer: PublicKey;\n\n  /**\n   * Create a new Authorized object\n   */\n  constructor(staker: PublicKey, withdrawer: PublicKey) {\n    this.staker = staker;\n    this.withdrawer = withdrawer;\n  }\n}\n\nexport class Lockup {\n  unixTimestamp: number;\n  epoch: number;\n  custodian: PublicKey;\n\n  /**\n   * Create a new Lockup object\n   */\n  constructor(unixTimestamp: number, epoch: number, custodian: PublicKey) {\n    this.unixTimestamp = unixTimestamp;\n    this.epoch = epoch;\n    this.custodian = custodian;\n  }\n}\n\n/**\n * Create stake account transaction params\n * @typedef {Object} CreateStakeAccountParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Create stake account with seed transaction params\n * @typedef {Object} CreateStakeAccountWithSeedParams\n * @property {PublicKey} fromPubkey\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} basePubkey\n * @property {string} seed\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n * @property {number} lamports\n */\nexport type CreateStakeAccountWithSeedParams = {|\n  fromPubkey: PublicKey,\n  stakePubkey: PublicKey,\n  basePubkey: PublicKey,\n  seed: string,\n  authorized: Authorized,\n  lockup: Lockup,\n  lamports: number,\n|};\n\n/**\n * Initialize stake instruction params\n * @typedef {Object} InitializeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {Authorized} authorized\n * @property {Lockup} lockup\n */\nexport type InitializeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorized: Authorized,\n  lockup: Lockup,\n|};\n\n/**\n * Delegate stake instruction params\n * @typedef {Object} DelegateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} votePubkey\n */\nexport type DelegateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  votePubkey: PublicKey,\n|};\n\n/**\n * Authorize stake instruction params\n * @typedef {Object} AuthorizeStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n */\nexport type AuthorizeStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n|};\n\n/**\n * Authorize stake instruction params using a derived key\n * @typedef {Object} AuthorizeWithSeedStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorityBase\n * @property {string} authoritySeed\n * @property {PublicKey} authorityOwner\n * @property {PublicKey} newAuthorizedPubkey\n * @property {StakeAuthorizationType} stakeAuthorizationType\n */\nexport type AuthorizeWithSeedStakeParams = {|\n  stakePubkey: PublicKey,\n  authorityBase: PublicKey,\n  authoritySeed: string,\n  authorityOwner: PublicKey,\n  newAuthorizedPubkey: PublicKey,\n  stakeAuthorizationType: StakeAuthorizationType,\n|};\n\n/**\n * Split stake instruction params\n * @typedef {Object} SplitStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} splitStakePubkey\n * @property {number} lamports\n */\nexport type SplitStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  splitStakePubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Withdraw stake instruction params\n * @typedef {Object} WithdrawStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n * @property {PublicKey} toPubkey\n * @property {number} lamports\n */\nexport type WithdrawStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n  toPubkey: PublicKey,\n  lamports: number,\n|};\n\n/**\n * Deactivate stake instruction params\n * @typedef {Object} DeactivateStakeParams\n * @property {PublicKey} stakePubkey\n * @property {PublicKey} authorizedPubkey\n */\nexport type DeactivateStakeParams = {|\n  stakePubkey: PublicKey,\n  authorizedPubkey: PublicKey,\n|};\n\n/**\n * Stake Instruction class\n */\nexport class StakeInstruction {\n  /**\n   * Decode a stake instruction and retrieve the instruction type.\n   */\n  static decodeInstructionType(\n    instruction: TransactionInstruction,\n  ): StakeInstructionType {\n    this.checkProgramId(instruction.programId);\n\n    const instructionTypeLayout = BufferLayout.u32('instruction');\n    const typeIndex = instructionTypeLayout.decode(instruction.data);\n\n    let type;\n    for (const t of Object.keys(STAKE_INSTRUCTION_LAYOUTS)) {\n      if (STAKE_INSTRUCTION_LAYOUTS[t].index == typeIndex) {\n        type = t;\n      }\n    }\n\n    if (!type) {\n      throw new Error('Instruction type incorrect; not a StakeInstruction');\n    }\n\n    return type;\n  }\n\n  /**\n   * Decode a initialize stake instruction and retrieve the instruction params.\n   */\n  static decodeInitialize(\n    instruction: TransactionInstruction,\n  ): InitializeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n\n    const {authorized, lockup} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Initialize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorized: new Authorized(\n        new PublicKey(authorized.staker),\n        new PublicKey(authorized.withdrawer),\n      ),\n      lockup: new Lockup(\n        lockup.unixTimestamp,\n        lockup.epoch,\n        new PublicKey(lockup.custodian),\n      ),\n    };\n  }\n\n  /**\n   * Decode a delegate stake instruction and retrieve the instruction params.\n   */\n  static decodeDelegate(\n    instruction: TransactionInstruction,\n  ): DelegateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 6);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Delegate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      votePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[5].pubkey,\n    };\n  }\n\n  /**\n   * Decode an authorize stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorize(\n    instruction: TransactionInstruction,\n  ): AuthorizeStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {newAuthorized, stakeAuthorizationType} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Authorize,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode an authorize-with-seed stake instruction and retrieve the instruction params.\n   */\n  static decodeAuthorizeWithSeed(\n    instruction: TransactionInstruction,\n  ): AuthorizeWithSeedStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 2);\n    const {newAuthorized, stakeAuthorizationType, authoritySeed, authorityOwner} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorityBase: instruction.keys[1].pubkey,\n      authoritySeed: authoritySeed,\n      authorityOwner: new PublicKey(authorityOwner),\n      newAuthorizedPubkey: new PublicKey(newAuthorized),\n      stakeAuthorizationType: {\n        index: stakeAuthorizationType,\n      },\n    };\n  }\n\n  /**\n   * Decode a split stake instruction and retrieve the instruction params.\n   */\n  static decodeSplit(instruction: TransactionInstruction): SplitStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Split,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      splitStakePubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a withdraw stake instruction and retrieve the instruction params.\n   */\n  static decodeWithdraw(\n    instruction: TransactionInstruction,\n  ): WithdrawStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 5);\n    const {lamports} = decodeData(\n      STAKE_INSTRUCTION_LAYOUTS.Withdraw,\n      instruction.data,\n    );\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      toPubkey: instruction.keys[1].pubkey,\n      authorizedPubkey: instruction.keys[4].pubkey,\n      lamports,\n    };\n  }\n\n  /**\n   * Decode a deactivate stake instruction and retrieve the instruction params.\n   */\n  static decodeDeactivate(\n    instruction: TransactionInstruction,\n  ): DeactivateStakeParams {\n    this.checkProgramId(instruction.programId);\n    this.checkKeyLength(instruction.keys, 3);\n    decodeData(STAKE_INSTRUCTION_LAYOUTS.Deactivate, instruction.data);\n\n    return {\n      stakePubkey: instruction.keys[0].pubkey,\n      authorizedPubkey: instruction.keys[2].pubkey,\n    };\n  }\n\n  /**\n   * @private\n   */\n  static checkProgramId(programId: PublicKey) {\n    if (!programId.equals(StakeProgram.programId)) {\n      throw new Error('invalid instruction; programId is not StakeProgram');\n    }\n  }\n\n  /**\n   * @private\n   */\n  static checkKeyLength(keys: Array<any>, expectedLength: number) {\n    if (keys.length < expectedLength) {\n      throw new Error(\n        `invalid instruction; found ${keys.length} keys, expected at least ${expectedLength}`,\n      );\n    }\n  }\n}\n\n/**\n * An enumeration of valid StakeInstructionType's\n * @typedef { 'Initialize' | 'Authorize' | 'AuthorizeWithSeed' | 'Delegate' | 'Split' | 'Withdraw'\n | 'Deactivate' } StakeInstructionType\n */\nexport type StakeInstructionType = $Keys<typeof STAKE_INSTRUCTION_LAYOUTS>;\n\n/**\n * An enumeration of valid stake InstructionType's\n */\nexport const STAKE_INSTRUCTION_LAYOUTS = Object.freeze({\n  Initialize: {\n    index: 0,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.authorized(),\n      Layout.lockup(),\n    ]),\n  },\n  Authorize: {\n    index: 1,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n    ]),\n  },\n  Delegate: {\n    index: 2,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  Split: {\n    index: 3,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Withdraw: {\n    index: 4,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      BufferLayout.ns64('lamports'),\n    ]),\n  },\n  Deactivate: {\n    index: 5,\n    layout: BufferLayout.struct([BufferLayout.u32('instruction')]),\n  },\n  AuthorizeWithSeed: {\n    index: 8,\n    layout: BufferLayout.struct([\n      BufferLayout.u32('instruction'),\n      Layout.publicKey('newAuthorized'),\n      BufferLayout.u32('stakeAuthorizationType'),\n      Layout.rustString('authoritySeed'),\n      Layout.publicKey('authorityOwner'),\n    ]),\n  },\n});\n\n/**\n * @typedef {Object} StakeAuthorizationType\n * @property (index} The Stake Authorization index (from solana-stake-program)\n */\nexport type StakeAuthorizationType = {|\n  index: number,\n|};\n\n/**\n * An enumeration of valid StakeAuthorizationLayout's\n */\nexport const StakeAuthorizationLayout = Object.freeze({\n  Staker: {\n    index: 0,\n  },\n  Withdrawer: {\n    index: 1,\n  },\n});\n\n/**\n * Factory class for transactions to interact with the Stake program\n */\nexport class StakeProgram {\n  /**\n   * Public key that identifies the Stake program\n   */\n  static get programId(): PublicKey {\n    return new PublicKey('Stake11111111111111111111111111111111111111');\n  }\n\n  /**\n   * Max space of a Stake account\n   */\n  static get space(): number {\n    return 4008;\n  }\n\n  /**\n   * Generate an Initialize instruction to add to a Stake Create transaction\n   */\n  static initialize(params: InitializeStakeParams): TransactionInstruction {\n    const {stakePubkey, authorized, lockup} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Initialize;\n    const data = encodeData(type, {\n      authorized: {\n        staker: authorized.staker.toBuffer(),\n        withdrawer: authorized.withdrawer.toBuffer(),\n      },\n      lockup: {\n        unixTimestamp: lockup.unixTimestamp,\n        epoch: lockup.epoch,\n        custodian: lockup.custodian.toBuffer(),\n      },\n    });\n    const instructionData = {\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_RENT_PUBKEY, isSigner: false, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    };\n    return new TransactionInstruction(instructionData);\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account at\n   *   an address generated with `from`, a seed, and the Stake programId\n   */\n  static createAccountWithSeed(\n    params: CreateStakeAccountWithSeedParams,\n  ): Transaction {\n    let transaction = SystemProgram.createAccountWithSeed({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      basePubkey: params.basePubkey,\n      seed: params.seed,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId,\n    });\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that creates a new Stake account\n   */\n  static createAccount(params: CreateStakeAccountParams): Transaction {\n    let transaction = SystemProgram.createAccount({\n      fromPubkey: params.fromPubkey,\n      newAccountPubkey: params.stakePubkey,\n      lamports: params.lamports,\n      space: this.space,\n      programId: this.programId,\n    });\n\n    const {stakePubkey, authorized, lockup} = params;\n    return transaction.add(this.initialize({stakePubkey, authorized, lockup}));\n  }\n\n  /**\n   * Generate a Transaction that delegates Stake tokens to a validator\n   * Vote PublicKey. This transaction can also be used to redelegate Stake\n   * to a new validator Vote PublicKey.\n   */\n  static delegate(params: DelegateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, votePubkey} = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Delegate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: votePubkey, isSigner: false, isWritable: false},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: STAKE_CONFIG_ID, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorize(params: AuthorizeStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorizedPubkey,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.Authorize;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that authorizes a new PublicKey as Staker\n   * or Withdrawer on the Stake account.\n   */\n  static authorizeWithSeed(params: AuthorizeWithSeedStakeParams): Transaction {\n    const {\n      stakePubkey,\n      authorityBase,\n      authoritySeed,\n      authorityOwner,\n      newAuthorizedPubkey,\n      stakeAuthorizationType,\n    } = params;\n\n    const type = STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed;\n    const data = encodeData(type, {\n      newAuthorized: newAuthorizedPubkey.toBuffer(),\n      stakeAuthorizationType: stakeAuthorizationType.index,\n      authoritySeed: authoritySeed,\n      authorityOwner: authorityOwner.toBuffer(),\n    });\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorityBase, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that splits Stake tokens into another stake account\n   */\n  static split(params: SplitStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, splitStakePubkey, lamports} = params;\n\n    let transaction = SystemProgram.createAccount({\n      fromPubkey: authorizedPubkey,\n      newAccountPubkey: splitStakePubkey,\n      lamports: 0,\n      space: this.space,\n      programId: this.programId,\n    });\n    const type = STAKE_INSTRUCTION_LAYOUTS.Split;\n    const data = encodeData(type, {lamports});\n\n    return transaction.add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: splitStakePubkey, isSigner: false, isWritable: true},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that withdraws deactivated Stake tokens.\n   */\n  static withdraw(params: WithdrawStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey, toPubkey, lamports} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Withdraw;\n    const data = encodeData(type, {lamports});\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: toPubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {\n          pubkey: SYSVAR_STAKE_HISTORY_PUBKEY,\n          isSigner: false,\n          isWritable: false,\n        },\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n\n  /**\n   * Generate a Transaction that deactivates Stake tokens.\n   */\n  static deactivate(params: DeactivateStakeParams): Transaction {\n    const {stakePubkey, authorizedPubkey} = params;\n    const type = STAKE_INSTRUCTION_LAYOUTS.Deactivate;\n    const data = encodeData(type);\n\n    return new Transaction().add({\n      keys: [\n        {pubkey: stakePubkey, isSigner: false, isWritable: true},\n        {pubkey: SYSVAR_CLOCK_PUBKEY, isSigner: false, isWritable: false},\n        {pubkey: authorizedPubkey, isSigner: true, isWritable: false},\n      ],\n      programId: this.programId,\n      data,\n    });\n  }\n}\n","// @flow\n\nimport {struct} from 'superstruct';\n\nimport * as Layout from './layout';\nimport * as shortvec from './util/shortvec-encoding';\nimport {PublicKey} from './publickey';\n\nexport const VALIDATOR_INFO_KEY = new PublicKey(\n  'Va1idator1nfo111111111111111111111111111111',\n);\n\n/**\n * @private\n */\ntype ConfigKey = {|\n  publicKey: PublicKey,\n  isSigner: boolean,\n|};\n\n/**\n * Info used to identity validators.\n *\n * @typedef {Object} Info\n * @property {string} name validator name\n * @property {?string} website optional, validator website\n * @property {?string} details optional, extra information the validator chose to share\n * @property {?string} keybaseUsername optional, used to identify validators on keybase.io\n */\nexport type Info = {|\n  name: string,\n  website?: string,\n  details?: string,\n  keybaseUsername?: string,\n|};\n\nconst InfoString = struct({\n  name: 'string',\n  website: 'string?',\n  details: 'string?',\n  keybaseUsername: 'string?',\n});\n\n/**\n * ValidatorInfo class\n */\nexport class ValidatorInfo {\n  /**\n   * validator public key\n   */\n  key: PublicKey;\n  /**\n   * validator information\n   */\n  info: Info;\n\n  /**\n   * Construct a valid ValidatorInfo\n   *\n   * @param key validator public key\n   * @param info validator information\n   */\n  constructor(key: PublicKey, info: Info) {\n    this.key = key;\n    this.info = info;\n  }\n\n  /**\n   * Deserialize ValidatorInfo from the config account data. Exactly two config\n   * keys are required in the data.\n   *\n   * @param buffer config account data\n   * @return null if info was not found\n   */\n  static fromConfigData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): ValidatorInfo | null {\n    const PUBKEY_LENGTH = 32;\n\n    let byteArray = [...buffer];\n    const configKeyCount = shortvec.decodeLength(byteArray);\n    if (configKeyCount !== 2) return null;\n\n    const configKeys: Array<ConfigKey> = [];\n    for (let i = 0; i < 2; i++) {\n      const publicKey = new PublicKey(byteArray.slice(0, PUBKEY_LENGTH));\n      byteArray = byteArray.slice(PUBKEY_LENGTH);\n      const isSigner = byteArray.slice(0, 1)[0] === 1;\n      byteArray = byteArray.slice(1);\n      configKeys.push({publicKey, isSigner});\n    }\n\n    if (configKeys[0].publicKey.equals(VALIDATOR_INFO_KEY)) {\n      if (configKeys[1].isSigner) {\n        const rawInfo = Layout.rustString().decode(Buffer.from(byteArray));\n        const info = InfoString(JSON.parse(rawInfo));\n        return new ValidatorInfo(configKeys[1].publicKey, info);\n      }\n    }\n\n    return null;\n  }\n}\n","// @flow\nimport * as BufferLayout from 'buffer-layout';\n\nimport * as Layout from './layout';\nimport {PublicKey} from './publickey';\nimport {toBuffer} from './util/to-buffer';\n\nexport const VOTE_PROGRAM_ID = new PublicKey(\n  'Vote111111111111111111111111111111111111111',\n);\n\nexport type Lockout = {|\n  slot: number,\n  confirmationCount: number,\n|};\n\n/**\n * History of how many credits earned by the end of each epoch\n */\nexport type EpochCredits = {|\n  epoch: number,\n  credits: number,\n  prevCredits: number,\n|};\n\n/**\n * See https://github.com/solana-labs/solana/blob/8a12ed029cfa38d4a45400916c2463fb82bbec8c/programs/vote_api/src/vote_state.rs#L68-L88\n *\n * @private\n */\nconst VoteAccountLayout = BufferLayout.struct([\n  Layout.publicKey('nodePubkey'),\n  Layout.publicKey('authorizedVoterPubkey'),\n  Layout.publicKey('authorizedWithdrawerPubkey'),\n  BufferLayout.u8('commission'),\n  BufferLayout.nu64(), // votes.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('slot'),\n      BufferLayout.u32('confirmationCount'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'votes',\n  ),\n  BufferLayout.u8('rootSlotValid'),\n  BufferLayout.nu64('rootSlot'),\n  BufferLayout.nu64('epoch'),\n  BufferLayout.nu64('credits'),\n  BufferLayout.nu64('lastEpochCredits'),\n  BufferLayout.nu64(), // epochCredits.length\n  BufferLayout.seq(\n    BufferLayout.struct([\n      BufferLayout.nu64('epoch'),\n      BufferLayout.nu64('credits'),\n      BufferLayout.nu64('prevCredits'),\n    ]),\n    BufferLayout.offset(BufferLayout.u32(), -8),\n    'epochCredits',\n  ),\n]);\n\n/**\n * VoteAccount class\n */\nexport class VoteAccount {\n  nodePubkey: PublicKey;\n  authorizedVoterPubkey: PublicKey;\n  authorizedWithdrawerPubkey: PublicKey;\n  commission: number;\n  votes: Array<Lockout>;\n  rootSlot: number | null;\n  epoch: number;\n  credits: number;\n  lastEpochCredits: number;\n  epochCredits: Array<EpochCredits>;\n\n  /**\n   * Deserialize VoteAccount from the account data.\n   *\n   * @param buffer account data\n   * @return VoteAccount\n   */\n  static fromAccountData(\n    buffer: Buffer | Uint8Array | Array<number>,\n  ): VoteAccount {\n    const va = VoteAccountLayout.decode(toBuffer(buffer), 0);\n    va.nodePubkey = new PublicKey(va.nodePubkey);\n    va.authorizedVoterPubkey = new PublicKey(va.authorizedVoterPubkey);\n    va.authorizedWithdrawerPubkey = new PublicKey(\n      va.authorizedWithdrawerPubkey,\n    );\n    if (!va.rootSlotValid) {\n      va.rootSlot = null;\n    }\n    return va;\n  }\n}\n","// @flow\n\nimport {Connection} from '../connection';\nimport type {TransactionSignature} from '../transaction';\nimport type {ConfirmOptions} from '../connection';\n\n/**\n * Send and confirm a raw transaction\n *\n * If `confirmations` count is not specified, wait for transaction to be finalized.\n *\n * @param {Connection} connection\n * @param {Buffer} rawTransaction\n * @param {ConfirmOptions} [options]\n * @returns {Promise<TransactionSignature>}\n */\nexport async function sendAndConfirmRawTransaction(\n  connection: Connection,\n  rawTransaction: Buffer,\n  options?: ConfirmOptions,\n): Promise<TransactionSignature> {\n  const start = Date.now();\n  const signature = await connection.sendRawTransaction(\n    rawTransaction,\n    options,\n  );\n  const status = (\n    await connection.confirmTransaction(\n      signature,\n      options && options.confirmations,\n    )\n  ).value;\n\n  if (status) {\n    if (status.err) {\n      throw new Error(\n        `Raw transaction ${signature} failed (${JSON.stringify(status)})`,\n      );\n    }\n    return signature;\n  }\n\n  const duration = (Date.now() - start) / 1000;\n  throw new Error(\n    `Raw transaction '${signature}' was not confirmed in ${duration.toFixed(\n      2,\n    )} seconds`,\n  );\n}\n","//@flow\n\n/**\n * @private\n */\nconst endpoint = {\n  http: {\n    devnet: 'http://devnet.solana.com',\n    testnet: 'http://testnet.solana.com',\n    'mainnet-beta': 'http://api.mainnet-beta.solana.com',\n  },\n  https: {\n    devnet: 'https://devnet.solana.com',\n    testnet: 'https://testnet.solana.com',\n    'mainnet-beta': 'https://api.mainnet-beta.solana.com',\n  },\n};\n\nexport type Cluster = 'devnet' | 'testnet' | 'mainnet-beta';\n\n/**\n * Retrieves the RPC API URL for the specified cluster\n */\nexport function clusterApiUrl(cluster?: Cluster, tls?: boolean): string {\n  const key = tls === false ? 'http' : 'https';\n\n  if (!cluster) {\n    return endpoint[key]['devnet'];\n  }\n\n  const url = endpoint[key][cluster];\n  if (!url) {\n    throw new Error(`Unknown ${key} cluster: ${cluster}`);\n  }\n  return url;\n}\n","// @flow\nexport {Account} from './account';\nexport {BpfLoader} from './bpf-loader';\nexport {Connection} from './connection';\nexport {Loader} from './loader';\nexport {Message} from './message';\nexport {NonceAccount, NONCE_ACCOUNT_LENGTH} from './nonce-account';\nexport {PublicKey} from './publickey';\nexport {\n  STAKE_CONFIG_ID,\n  Authorized,\n  Lockup,\n  StakeAuthorizationLayout,\n  StakeInstruction,\n  STAKE_INSTRUCTION_LAYOUTS,\n  StakeProgram,\n} from './stake-program';\nexport {\n  SystemInstruction,\n  SystemProgram,\n  SYSTEM_INSTRUCTION_LAYOUTS,\n} from './system-program';\nexport {Transaction, TransactionInstruction} from './transaction';\nexport {VALIDATOR_INFO_KEY, ValidatorInfo} from './validator-info';\nexport {VOTE_PROGRAM_ID, VoteAccount} from './vote-account';\nexport {\n  SYSVAR_CLOCK_PUBKEY,\n  SYSVAR_RENT_PUBKEY,\n  SYSVAR_REWARDS_PUBKEY,\n  SYSVAR_STAKE_HISTORY_PUBKEY,\n} from './sysvar';\nexport {sendAndConfirmTransaction} from './util/send-and-confirm-transaction';\nexport {sendAndConfirmRawTransaction} from './util/send-and-confirm-raw-transaction';\nexport {clusterApiUrl} from './util/cluster';\n\n/**\n * There are 1-billion lamports in one SOL\n */\nexport const LAMPORTS_PER_SOL = 1000000000;\n"],"names":["toBuffer","arr","Buffer","Uint8Array","from","buffer","byteOffset","byteLength","naclLowLevel","nacl","lowlevel","PublicKey","value","decoded","bs58","decode","length","Error","_bn","BN","publicKey","eq","encode","b","toArrayLike","zeroPad","alloc","copy","toBase58","fromPublicKey","seed","programId","concat","sha256","hash","seeds","forEach","publicKeyBytes","toArray","is_on_curve","nonce","seedsWithNonce","createProgramAddress","address","p","r","gf","t","chk","num","den","den2","den4","den6","set25519","gf1","unpack25519","S","M","D","Z","A","pow2523","neq25519","I","a","c","d","pack25519","crypto_verify_32","Account","secretKey","_keypair","sign","keyPair","fromSecretKey","NUM_TICKS_PER_SECOND","DEFAULT_TICKS_PER_SLOT","NUM_SLOTS_PER_SECOND","MS_PER_SLOT","property","BufferLayout","rustString","rsl","_decode","bind","_encode","offset","data","chars","toString","str","span","authorized","lockup","getAlloc","type","fields","layout","item","decodeLength","bytes","len","size","elem","shift","encodeLength","rem_len","push","PUBKEY_LENGTH","Message","args","header","accountKeys","map","account","recentBlockhash","instructions","index","numRequiredSignatures","numReadonlySignedAccounts","numReadonlyUnsignedAccounts","numKeys","keyCount","shortvec","instruction","accounts","programIdIndex","keyIndicesCount","dataCount","keyIndices","dataLength","instructionCount","instructionBuffer","PACKET_DATA_SIZE","instructionBufferLength","instructionLayout","slice","signDataLayout","Layout","transaction","keys","key","signData","byteArray","accountCount","i","messageArgs","DEFAULT_SIGNATURE","fill","SIGNATURE_LENGTH","TransactionInstruction","opts","Object","assign","Transaction","signatures","signature","items","nonceInfo","nonceInstruction","unshift","programIds","accountMetas","accountMeta","includes","pubkey","isSigner","isWritable","sort","x","y","checkSigner","checkWritable","uniqueMetas","pubkeyString","uniqueIndex","findIndex","sigPubkeyString","signedKeys","unsignedKeys","first","indexOf","keyObj","invariant","keyIndex","compileMessage","serialize","signPartial","partialSigners","partialSignerPublicKey","accountOrPublicKey","signerAccount","serializeMessage","detached","signer","addSignature","sigpair","equals","_verifySignatures","verified","verify","_serialize","signatureCount","transactionLength","wireTransaction","populate","message","sigPubkeyPair","some","isAccountWritable","SYSVAR_CLOCK_PUBKEY","SYSVAR_RECENT_BLOCKHASHES_PUBKEY","SYSVAR_RENT_PUBKEY","SYSVAR_REWARDS_PUBKEY","SYSVAR_STAKE_HISTORY_PUBKEY","FeeCalculatorLayout","NonceAccountLayout","NONCE_ACCOUNT_LENGTH","NonceAccount","nonceAccount","authorizedPubkey","sleep","ms","Promise","resolve","setTimeout","BLOCKHASH_CACHE_TIMEOUT_MS","jsonRpcResultAndContext","resultDescription","jsonRpcResult","context","struct","slot","jsonRpcVersion","literal","union","jsonrpc","id","error","result","notificationResultAndContext","GetInflationGovernorResult","foundation","foundationTerm","initial","taper","terminal","GetEpochInfoResult","epoch","slotIndex","slotsInEpoch","absoluteSlot","blockHeight","GetEpochScheduleResult","slotsPerEpoch","leaderScheduleSlotOffset","warmup","firstNormalEpoch","firstNormalSlot","GetLeaderScheduleResult","record","array","TransactionErrorResult","SignatureStatusResult","err","Version","SimulatedTransactionResponseValidator","pick","logs","createRpcRequest","url","server","jayson","request","callback","options","method","body","headers","too_many_requests_retries","res","fetch","status","console","log","statusText","text","ok","reject","response","GetInflationGovernorRpcResult","GetEpochInfoRpcResult","GetEpochScheduleRpcResult","GetLeaderScheduleRpcResult","GetBalanceAndContextRpcResult","GetBlockTimeRpcResult","SlotRpcResult","GetSupplyRpcResult","total","circulating","nonCirculating","nonCirculatingAccounts","TokenAmountResult","object","amount","uiAmount","decimals","GetTokenLargestAccountsResult","GetTokenAccountBalance","GetTokenSupplyRpcResult","GetTokenAccountsByOwner","executable","owner","lamports","rentEpoch","GetParsedTokenAccountsByOwner","program","parsed","space","GetLargestAccountsRpcResult","GetVersionRpcResult","AccountInfoResult","ParsedAccountInfoResult","GetAccountInfoAndContextRpcResult","GetParsedAccountInfoResult","GetConfirmedSignaturesForAddressRpcResult","GetConfirmedSignaturesForAddress2RpcResult","memo","AccountNotificationResult","subscription","ProgramAccountInfoResult","ParsedProgramAccountInfoResult","ProgramAccountNotificationResult","SlotInfoResult","parent","root","SlotNotificationResult","SignatureNotificationResult","RootNotificationResult","GetProgramAccountsRpcResult","GetParsedProgramAccountsRpcResult","GetSlot","GetSlotLeader","GetClusterNodes","gossip","tpu","rpc","version","GetVoteAccounts","current","votePubkey","nodePubkey","activatedStake","epochVoteAccount","epochCredits","tuple","commission","lastVote","rootSlot","delinquent","GetSignatureStatusesRpcResult","confirmations","GetTransactionCountRpcResult","GetTotalSupplyRpcResult","GetMinimumBalanceForRentExemptionRpcResult","ConfirmedTransactionResult","ParsedConfirmedTransactionResult","writable","ConfirmedTransactionMetaResult","fee","preBalances","postBalances","GetConfirmedBlockRpcResult","blockhash","previousBlockhash","parentSlot","transactions","meta","rewards","GetConfirmedTransactionRpcResult","GetParsedConfirmedTransactionRpcResult","GetRecentBlockhashAndContextRpcResult","feeCalculator","lamportsPerSignature","GetFeeCalculatorRpcResult","RequestAirdropRpcResult","SendTransactionRpcResult","Connection","endpoint","commitment","urlParse","_rpcRequest","href","_commitment","_blockhashInfo","lastFetch","Date","transactionSignatures","simulatedSignatures","protocol","host","port","String","Number","_rpcWebSocket","RpcWebSocketClient","urlFormat","autoconnect","max_reconnects","Infinity","on","_wsOnOpen","_wsOnError","_wsOnClose","_wsOnAccountNotification","_wsOnProgramAccountNotification","_wsOnSlotNotification","_wsOnSignatureNotification","_wsOnRootNotification","_buildArgs","unsafeRes","assert","getBalanceAndContext","then","e","tokenMintAddress","tokenAddress","ownerAddress","filter","_args","mint","config","arg","mintAddress","pair","resultData","getAccountInfoAndContext","start","now","WAIT_TIMEOUT_MS","getSignatureStatus","statusResponse","getSignatureStatuses","params","warn","getRecentBlockhashAndContext","accountKey","ix","mapped","startSlot","endSlot","accountInfo","fromAccountData","getNonceAndContext","to","disableCache","expired","_pollNewBlockhash","startTime","getRecentBlockhash","signers","_disableBlockhashCaching","_recentBlockhash","encodedTransaction","sigVerify","sendRawTransaction","rawTransaction","sendEncodedTransaction","skipPreflight","_rpcWebSocketConnected","_updateSubscriptions","_resetSubscriptions","sub","rpcMethod","rpcArgs","subscriptionId","call","unsubscribeId","values","_accountChangeSubscriptions","s","_programAccountChangeSubscriptions","_signatureSubscriptions","_slotSubscriptions","_rootSubscriptions","programKeys","slotKeys","signatureKeys","rootKeys","close","connect","_subscribe","notification","_accountChangeSubscriptionCounter","subInfo","_unsubscribe","accountId","_programAccountChangeSubscriptionCounter","_slotSubscriptionCounter","override","encoding","_signatureSubscriptionCounter","_rootSubscriptionCounter","sendAndConfirmTransaction","connection","sendTransaction","confirmTransaction","JSON","stringify","duration","toFixed","encodeData","allocLength","layoutFields","decodeData","SystemInstruction","checkProgramId","instructionTypeLayout","typeIndex","SYSTEM_INSTRUCTION_LAYOUTS","checkKeyLength","Create","fromPubkey","newAccountPubkey","Transfer","toPubkey","Allocate","accountPubkey","AllocateWithSeed","base","basePubkey","Assign","AssignWithSeed","CreateWithSeed","InitializeNonceAccount","noncePubkey","AdvanceNonceAccount","WithdrawNonceAccount","AuthorizeNonceAccount","newAuthorizedPubkey","SystemProgram","expectedLength","freeze","add","createAccountWithSeed","createAccount","initParams","nonceInitialize","instructionData","Loader","Math","ceil","chunkSize","payer","getMinimumBalanceForRentExemption","balanceNeeded","dataLayout","all","BpfLoader","getMinNumSignatures","elf","load","STAKE_CONFIG_ID","Authorized","staker","withdrawer","Lockup","unixTimestamp","custodian","StakeInstruction","STAKE_INSTRUCTION_LAYOUTS","Initialize","stakePubkey","Delegate","Authorize","newAuthorized","stakeAuthorizationType","AuthorizeWithSeed","authoritySeed","authorityOwner","authorityBase","Split","splitStakePubkey","Withdraw","Deactivate","StakeProgram","StakeAuthorizationLayout","Staker","Withdrawer","initialize","VALIDATOR_INFO_KEY","InfoString","name","website","details","keybaseUsername","ValidatorInfo","info","configKeyCount","configKeys","rawInfo","parse","VOTE_PROGRAM_ID","VoteAccountLayout","VoteAccount","va","authorizedVoterPubkey","authorizedWithdrawerPubkey","rootSlotValid","sendAndConfirmRawTransaction","http","devnet","testnet","https","clusterApiUrl","cluster","tls","LAMPORTS_PER_SOL"],"mappings":"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"}